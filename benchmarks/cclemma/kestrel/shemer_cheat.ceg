(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))

  (data Tup (TupCon))
  (:: TupCon (-> (Nat Nat Nat Nat) Tup))
  (:: tupn1 (-> (Tup) Nat))
  (let tupn1 ((TupCon ?n1 ?n2 ?n3 ?n4)) (?n1))
  (:: tupn2 (-> (Tup) Nat))
  (let tupn2 ((TupCon ?n1 ?n2 ?n3 ?n4)) (?n2))
  (:: tupn3 (-> (Tup) Nat))
  (let tupn3 ((TupCon ?n1 ?n2 ?n3 ?n4)) (?n3))
  (:: tupn4 (-> (Tup) Nat))
  (let tupn4 ((TupCon ?n1 ?n2 ?n3 ?n4)) (?n4))
  (:: ite2 (-> (Bool Tup Tup) Tup))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)

  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: lt (-> (Nat Nat) Bool))
  (let lt (Zero (Succ ?x)) True)
  (let lt (?x Zero) False)
  (let lt ((Succ ?x) (Succ ?y)) (lt ?x ?y))
  (:: add (-> (Nat Nat) Nat))
  (let add (Zero      ?y) ?y             )
  (let add ((Succ ?x) ?y) (Succ (add ?x ?y)))
  (:: mult (-> (Nat Nat) Nat))
  (let mult (Zero ?n) (Zero))
  (let mult ((Succ ?m) ?n) (add (mult ?m ?n) ?n))
  (:: double (-> (Nat) Nat))
  (let double (?x) (add ?x ?x)             )
  
  (:: leftWhile (-> (Tup) Tup))
  (let leftWhile ((TupCon ?x ?y ?z ?i))
    (ite2 
      (lt ?i ?z) 
      (leftWhile (TupCon ?x (add ?y ?x) ?z (Succ ?i)))
      (TupCon ?x ?y ?z ?i)))


  (=== optimize1 (nTop) (Nat) 
  (tupn2 (leftWhile (TupCon nTop Zero (double nTop) Zero))) 
  (double (tupn2 (leftWhile (TupCon nTop Zero nTop Zero))))
  ((<=> (tupn2 (leftWhile (TupCon ?x Zero ?z Zero))) (mult ?x ?z))
  (<=> (mult ?x (add ?x ?x)) (add (mult ?x ?x) (mult ?x ?x)))))

  (=== optimize2 (nTop) (Nat) 
  (tupn2 (leftWhile (TupCon nTop Zero (double nTop) Zero))) 
  (double (tupn2 (leftWhile (TupCon nTop Zero nTop Zero))))
  ((<=> (tupn2 (leftWhile (TupCon ?x Zero ?z Zero))) (mult ?x ?z))))
)
