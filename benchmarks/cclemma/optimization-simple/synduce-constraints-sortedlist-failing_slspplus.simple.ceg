(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (data NList (Line Ncons))
  (:: Line (-> (List) NList))
  (:: Ncons (-> (List NList) NList))
  (data CList (Sglt Cat))
  (:: Sglt (-> (List) CList))
  (:: Cat (-> (CList Nat CList) CList))
  (:: tf1 (-> (NList CList) NList))
  (let tf1 (?tv4 (Sglt ?tv5)) (Ncons ?tv5 ?tv4))
  (let tf1 (?tv4 (Cat ?tv6 ?tv7 ?tv8)) (tf1 (tf1 ?tv4 ?tv8) ?tv6))
  (:: c2n (-> (CList) NList))
  (let c2n ((Sglt ?tv11)) (Line ?tv11))
  (let c2n ((Cat ?tv12 ?tv13 ?tv14)) (tf1 (c2n ?tv14) ?tv12))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: lsum (-> (List) Nat))
  (let lsum ((Elt ?tv18)) ?tv18)
  (let lsum ((Cons ?tv19 ?tv20)) (plus ?tv19 (lsum ?tv20)))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite3 (-> (Bool Nat Nat) Nat))
  (let ite3 (True ?x ?y) ?x)
  (let ite3 (False ?x ?y) ?y)
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv21 ?tv22) (ite3 (lq ?tv21 ?tv22) ?tv21 ?tv22))
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv23 ?tv24) (ite3 (lq ?tv23 ?tv24) ?tv24 ?tv23))
  (:: tf7 (-> (CList) Nat))
  (let tf7 ((Sglt ?tv28)) (lsum ?tv28))
  (let tf7 ((Cat ?tv29 ?tv30 ?tv31)) (min (tf7 ?tv29) (tf7 ?tv31)))
  (:: tf9 (-> (CList) Nat))
  (let tf9 ((Sglt ?tv34)) (lsum ?tv34))
  (let tf9 ((Cat ?tv35 ?tv36 ?tv37)) (max (tf9 ?tv35) (tf9 ?tv37)))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: sorted (-> (CList) Bool))
  (let sorted ((Sglt ?tv40)) True)
  (let sorted ((Cat ?tv41 ?tv42 ?tv43)) (and (and (lq (tf9 ?tv41) ?tv42) (lq ?tv42 (tf7 ?tv43))) (and (sorted ?tv41) (sorted ?tv43))))
  (data Tuple4 (MakeTuple4))
  (:: MakeTuple4 (-> (Nat Bool) Tuple4))
  (:: geq (-> (Nat Nat) Bool))
  (let geq (Zero (Succ ?x)) False)
  (let geq (?x Zero) True)
  (let geq ((Succ ?x) (Succ ?y)) (geq ?x ?y))
  (:: snd4 (-> (Tuple4) Bool))
  (let snd4 ((MakeTuple4 ?x0 ?x1)) ?x1)
  (:: fst4 (-> (Tuple4) Nat))
  (let fst4 ((MakeTuple4 ?x0 ?x1)) ?x0)
  (:: spec (-> (NList) Tuple4))
  (let spec ((Line ?tv47)) (MakeTuple4 (max Zero (lsum ?tv47)) (geq (lsum ?tv47) Zero)))
  (let spec ((Ncons ?tv48 ?tv49)) (MakeTuple4 (ite3 (and (snd4 (spec ?tv49)) (geq (lsum ?tv48) Zero)) (plus (fst4 (spec ?tv49)) (lsum ?tv48)) (fst4 (spec ?tv49))) (and (snd4 (spec ?tv49)) (geq (lsum ?tv48) Zero))))
  (:: tf15 (-> (List List) List))
  (let tf15 (?tv53 (Elt ?tv54)) ?tv53)
  (let tf15 (?tv53 (Cons ?tv55 ?tv56)) (Cons ?tv55 (tf14 ?tv56)))
  (:: tf14 (-> (List) List))
  (let tf14 (?tv51) (tf15 ?tv51 ?tv51))
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: ite5 (-> (Bool CList CList) CList))
  (let ite5 (True ?x ?y) ?x)
  (let ite5 (False ?x ?y) ?y)
  (:: target (-> (CList) CList))
  (let target ((Sglt ?tv59)) (Sglt (tf14 ?tv59)))
  (let target ((Cat ?tv60 ?tv61 ?tv62)) (ite5 (leq ?tv61 Zero) (Cat ?tv60 ?tv61 (target ?tv62)) (Cat (target ?tv60) ?tv61 (target ?tv62))))
  (:: main (-> (CList) Nat))
  (let main (?tv63) (ite3 (sorted ?tv63) (fst4 (spec (c2n (target ?tv63)))) Zero))
  (:: tf19 (-> (List) Nat))
  (let tf19 ((Elt ?tv67)) ?tv67)
  (let tf19 ((Cons ?tv68 ?tv69)) (plus (tf18 ?tv69) ?tv68))
  (:: tf18 (-> (List) Nat))
  (let tf18 (?tv65) (tf19 ?tv65))
  (:: targetNew (-> (CList) Nat))
  (let targetNew ((Sglt ?tv72)) (max (tf18 ?tv72) Zero))
  (let targetNew ((Cat ?tv73 ?tv74 ?tv75)) (ite3 (leq ?tv74 Zero) (targetNew ?tv75) (plus (targetNew ?tv75) (targetNew ?tv73))))
  (:: mainNew (-> (CList) Nat))
  (let mainNew (?tv76) (ite3 (sorted ?tv76) (targetNew ?tv76) Zero))
  (=== synduce_constraints_sortedlist_failing_slspplus (inp0) (CList) (main inp0) (mainNew inp0))
)
