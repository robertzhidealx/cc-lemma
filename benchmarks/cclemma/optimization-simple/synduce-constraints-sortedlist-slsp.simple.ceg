(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (data CList (Single Concat))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> (Nat CList CList) CList))
  (:: cat (-> (List List) List))
  (let cat (?tv5 (Elt ?tv6)) (Cons ?tv6 ?tv5))
  (let cat (?tv5 (Cons ?tv7 ?tv8)) (Cons ?tv7 (cat ?tv5 ?tv8)))
  (:: repr (-> (CList) List))
  (let repr ((Single ?tv12)) (Elt ?tv12))
  (let repr ((Concat ?tv13 ?tv14 ?tv15)) (cat (repr ?tv15) (repr ?tv14)))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv16 ?tv17) (ite2 (lq ?tv16 ?tv17) ?tv17 ?tv16))
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv18 ?tv19) (ite2 (lq ?tv18 ?tv19) ?tv18 ?tv19))
  (:: tf5 (-> (CList) Nat))
  (let tf5 ((Single ?tv23)) ?tv23)
  (let tf5 ((Concat ?tv24 ?tv25 ?tv26)) (max (tf5 ?tv25) (tf5 ?tv26)))
  (:: tf7 (-> (CList) Nat))
  (let tf7 ((Single ?tv29)) ?tv29)
  (let tf7 ((Concat ?tv30 ?tv31 ?tv32)) (min (tf7 ?tv31) (tf7 ?tv32)))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: isparti (-> (CList) Bool))
  (let isparti ((Single ?tv35)) True)
  (let isparti ((Concat ?tv36 ?tv37 ?tv38)) (and (and (lq (tf5 ?tv37) ?tv36) (lq ?tv36 (tf7 ?tv38))) (and (isparti ?tv37) (isparti ?tv38))))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Bool) Tuple3))
  (:: geq (-> (Nat Nat) Bool))
  (let geq (Zero (Succ ?x)) False)
  (let geq (?x Zero) True)
  (let geq ((Succ ?x) (Succ ?y)) (geq ?x ?y))
  (:: snd3 (-> (Tuple3) Bool))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: spec (-> (List) Tuple3))
  (let spec ((Elt ?tv42)) (MakeTuple3 (max Zero ?tv42) (geq ?tv42 Zero)))
  (let spec ((Cons ?tv43 ?tv44)) (MakeTuple3 (ite2 (and (geq ?tv43 Zero) (snd3 (spec ?tv44))) (plus (fst3 (spec ?tv44)) ?tv43) (fst3 (spec ?tv44))) (and (geq ?tv43 Zero) (snd3 (spec ?tv44)))))
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: ite4 (-> (Bool CList CList) CList))
  (let ite4 (True ?x ?y) ?x)
  (let ite4 (False ?x ?y) ?y)
  (:: target (-> (CList CList) CList))
  (let target (?tv48 (Single ?tv49)) ?tv48)
  (let target (?tv48 (Concat ?tv50 ?tv51 ?tv52)) (ite4 (leq ?tv50 Zero) (Concat ?tv50 ?tv51 (cat2 ?tv52)) (Concat ?tv50 (target ?tv51 ?tv51) (target ?tv52 ?tv52))))
  (:: main (-> (CList) Nat))
  (let main (?tv53) (ite2 (isparti ?tv53) (fst3 (spec (repr (target ?tv53 ?tv53)))) Zero))
  (:: targetNew (-> (CList) Nat))
  (let targetNew ((Single ?tv57)) (max ?tv57 Zero))
  (let targetNew ((Concat ?tv58 ?tv59 ?tv60)) (ite2 (leq ?tv58 Zero) (targetNew ?tv60) (plus (targetNew ?tv60) (targetNew ?tv59))))
  (:: mainNew (-> (CList) Nat))
  (let mainNew (?tv61) (ite2 (isparti ?tv61) (targetNew ?tv61) Zero))
  (=== synduce-constraints-sortedlist-slsp (inp0) (CList) (main inp0) (mainNew inp0))
)
