(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Leaf Node))
  (:: Leaf (-> (Nat) Tree))
  (:: Node (-> (Nat Tree Tree) Tree))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv0 ?tv1) (ite2 (lq ?tv0 ?tv1) ?tv0 ?tv1))
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv2 ?tv3) (ite2 (lq ?tv2 ?tv3) ?tv3 ?tv2))
  (:: tmin (-> (Tree) Nat))
  (let tmin ((Leaf ?tv7)) ?tv7)
  (let tmin ((Node ?tv8 ?tv9 ?tv10)) (min ?tv8 (min (tmin ?tv9) (tmin ?tv10))))
  (:: tmax (-> (Tree) Nat))
  (let tmax ((Leaf ?tv14)) ?tv14)
  (let tmax ((Node ?tv15 ?tv16 ?tv17)) (max ?tv15 (max (tmax ?tv16) (tmax ?tv17))))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: geq (-> (Nat Nat) Bool))
  (let geq (Zero (Succ ?x)) False)
  (let geq (?x Zero) True)
  (let geq ((Succ ?x) (Succ ?y)) (geq ?x ?y))
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: isbst (-> (Tree) Bool))
  (let isbst ((Leaf ?tv21)) True)
  (let isbst ((Node ?tv22 ?tv23 ?tv24)) (and (and (geq ?tv22 (tmax ?tv23)) (leq ?tv22 (tmin ?tv24))) (and (isbst ?tv23) (isbst ?tv24))))
  (:: cat (-> (List List) List))
  (let cat (?tv29 (Cons ?tv31 ?tv32)) (Cons ?tv31 (cat ?tv29 ?tv32)))
  (let cat (?tv29 (Elt ?tv33)) (Cons ?tv33 ?tv29))
  (:: repr (-> (Tree) List))
  (let repr ((Leaf ?tv37)) (Elt ?tv37))
  (let repr ((Node ?tv38 ?tv39 ?tv40)) (cat (Cons ?tv38 (repr ?tv40)) (repr ?tv39)))
  (:: spec (-> (List) Nat))
  (let spec ((Elt ?tv44)) ?tv44)
  (let spec ((Cons ?tv45 ?tv46)) (max ?tv45 (spec ?tv46)))
  (:: target (-> (Tree) Tree))
  (let target ((Leaf ?tv50)) (Leaf ?tv50))
  (let target ((Node ?tv51 ?tv52 ?tv53)) (Node ?tv51 ?tv52 (target ?tv53)))
  (:: main (-> (Tree) Nat))
  (let main (?tv54) (ite2 (isbst ?tv54) (spec (repr (target ?tv54))) Zero))
  (:: targetNew (-> (Tree) Nat))
  (let targetNew ((Leaf ?tv58)) ?tv58)
  (let targetNew ((Node ?tv59 ?tv60 ?tv61)) (targetNew ?tv61))
  (:: mainNew (-> (Tree) Nat))
  (let mainNew (?tv62) (ite2 (isbst ?tv62) (targetNew ?tv62) Zero))
  (=== optimize (inp0) (Tree) (main inp0) (mainNew inp0))
)
