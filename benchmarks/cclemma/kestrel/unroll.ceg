(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tup3 (Tup3Con))
  (:: Tup3Con (-> (Nat Nat Nat) Tup3))

  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: add (-> (Nat Nat) Nat))
  (let add (Zero      ?y) ?y             )
  (let add ((Succ ?x) ?y) (Succ (add ?x ?y)))
  (:: tup3n1 (-> (Tup3) Nat))
  (let tup3n1 ((Tup3Con ?n1 ?n2 ?n3)) (?n1))
  (:: tup3n2 (-> (Tup3) Nat))
  (let tup3n2 ((Tup3Con ?n1 ?n2 ?n3)) (?n2))
  (:: tup3n3 (-> (Tup3) Nat))
  (let tup3n3 ((Tup3Con ?n1 ?n2 ?n3)) (?n3))
  (:: ite11 (-> (Bool Tup3 Tup3) Tup3))
  (let ite11 (True ?x ?y) ?x)
  (let ite11 (False ?x ?y) ?y)
  (:: leftWhile (-> (Tup3) Tup3))
  (let leftWhile ((Tup3Con ?n ?x ?i))
    (ite11 
      (leq ?i ?n) 
      (leftWhile (Tup3Con ?n (add ?x ?i) (Succ ?i)))
      (Tup3Con ?n ?x ?i)))
  (=== optimize (nTop) (Nat) (tup3n2 (leftWhile (Tup3Con nTop Zero Zero))) (tup3n2 (leftWhile (Tup3Con nTop Zero (Succ Zero)))))
)
