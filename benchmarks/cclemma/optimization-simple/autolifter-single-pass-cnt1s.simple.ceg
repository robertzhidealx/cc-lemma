(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data List (Cons Nil))
  (:: Cons (-> (Bool List) List))
  (:: Nil (-> (Unit) List))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: cnt1s (-> (Bool Nat List) Nat))
  (let cnt1s (?tv15 ?tv16 (Nil ?tv17)) ?tv16)
  (let cnt1s (?tv15 ?tv16 (Cons ?tv18 ?tv19)) (cnt1s ?tv18 (ite1 (and (not ?tv15) ?tv18) (plus ?tv16 (Succ Zero)) ?tv16) ?tv19))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Nat Bool) Tuple2))
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: snd2 (-> (Tuple2) Bool))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: mainNew (-> (List) Tuple2))
  (let mainNew ((Nil ?tv25)) (MakeTuple2 Zero False))
  (let mainNew ((Cons ?tv26 ?tv27)) (MakeTuple2 (ite1 (or (not ?tv26) (snd2 (mainNew ?tv27))) (fst2 (mainNew ?tv27)) (plus (Succ Zero) (fst2 (mainNew ?tv27)))) ?tv26))
  (=== optimize (inp0) (List) (cnt1s False Zero inp0) (fst2 (mainNew inp0)))
)
