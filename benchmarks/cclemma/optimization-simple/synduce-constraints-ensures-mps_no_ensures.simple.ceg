(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data CList (Cnil Single Concat))
  (:: Cnil (-> (Unit) CList))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> (CList CList) CList))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (:: cat (-> (List List) List))
  (let cat (?tv4 (Cons ?tv6 ?tv7)) (Cons ?tv6 (cat ?tv4 ?tv7)))
  (let cat (?tv4 (Nil ?tv8)) ?tv4)
  (:: repr (-> (CList) List))
  (let repr ((Cnil ?tv12)) (Nil Null))
  (let repr ((Single ?tv13)) (Cons ?tv13 (Nil Null)))
  (let repr ((Concat ?tv14 ?tv15)) (cat (repr ?tv15) (repr ?tv14)))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: max (-> (Nat) Nat))
  (let max (?tv17) (ite2 (lq Zero ?tv17) ?tv17 Zero))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Nat) Tuple3))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: spec (-> (List) Tuple3))
  (let spec ((Nil ?tv21)) (MakeTuple3 Zero Zero))
  (let spec ((Cons ?tv22 ?tv23)) (MakeTuple3 (max (plus (fst3 (spec ?tv23)) ?tv22)) (plus (snd3 (spec ?tv23)) ?tv22)))
  (:: reprNew (-> (CList) Tuple3))
  (let reprNew ((Cnil ?tv28)) (MakeTuple3 Zero Zero))
  (let reprNew ((Single ?tv29)) (MakeTuple3 (ite2 (lq ?tv29 Zero) Zero ?tv29) ?tv29))
  (let reprNew ((Concat ?tv30 ?tv31)) (MakeTuple3 (ite2 (lq (fst3 (reprNew ?tv30)) (plus (snd3 (reprNew ?tv30)) (fst3 (reprNew ?tv31)))) (plus (snd3 (reprNew ?tv30)) (fst3 (reprNew ?tv31))) (fst3 (reprNew ?tv30))) (plus (snd3 (reprNew ?tv30)) (snd3 (reprNew ?tv31)))))
  (=== synduce-constraints-ensures-mps_no_ensures (inp0) (CList) (fst3 (spec (repr inp0))) (fst3 (reprNew inp0)))
)
