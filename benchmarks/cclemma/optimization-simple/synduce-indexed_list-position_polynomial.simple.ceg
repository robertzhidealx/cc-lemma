(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (data IndexedList (Inil Icons))
  (:: Inil (-> (Unit) IndexedList))
  (:: Icons (-> (Nat Nat IndexedList) IndexedList))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: length (-> (List) Nat))
  (let length ((Nil ?tv3)) Zero)
  (let length ((Cons ?tv4 ?tv5)) (plus (Succ Zero) (length ?tv5)))
  (:: repr (-> (List) IndexedList))
  (let repr ((Nil ?tv9)) (Inil Null))
  (let repr ((Cons ?tv10 ?tv11)) (Icons ?tv10 (length ?tv11) (repr ?tv11)))
  (:: times (-> (Nat Nat) Nat))
  (let times (Zero ?x) Zero)
  (let times ((Succ ?x) ?y) (plus (times ?x ?y) ?y))
  (:: spec (-> (IndexedList) Nat))
  (let spec ((Inil ?tv15)) Zero)
  (let spec ((Icons ?tv16 ?tv17 ?tv18)) (plus (times ?tv16 ?tv17) (spec ?tv18)))
  (:: main (-> (List) Nat))
  (let main (?tv19) (spec (repr ?tv19)))
  (:: mainNew (-> (List) Nat))
  (let mainNew ((Nil ?tv23)) Zero)
  (let mainNew ((Cons ?tv24 ?tv25)) (plus (mainNew ?tv25) (times (length ?tv25) ?tv24)))
  (=== synduce-indexed_list-position_polynomial (inp0) (List) (main inp0) (mainNew inp0))
)
