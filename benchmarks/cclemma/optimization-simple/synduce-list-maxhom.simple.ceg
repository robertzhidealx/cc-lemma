(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (data CList (Single Concat))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> (CList CList) CList))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite2 (gq ?tv0 ?tv1) ?tv0 ?tv1))
  (:: spec (-> (List) Nat))
  (let spec ((Elt ?tv5)) ?tv5)
  (let spec ((Cons ?tv6 ?tv7)) (max ?tv6 (spec ?tv7)))
  (:: cat (-> (List List) List))
  (let cat (?tv13 (Elt ?tv14)) (Cons ?tv14 ?tv13))
  (let cat (?tv13 (Cons ?tv15 ?tv16)) (Cons ?tv15 (cat ?tv13 ?tv16)))
  (:: repr (-> (CList) List))
  (let repr ((Single ?tv20)) (Elt ?tv20))
  (let repr ((Concat ?tv21 ?tv22)) (cat (repr ?tv22) (repr ?tv21)))
  (:: main (-> (CList) Nat))
  (let main (?tv23) (spec (repr ?tv23)))
  (:: mainNew (-> (CList) Nat))
  (let mainNew ((Single ?tv27)) ?tv27)
  (let mainNew ((Concat ?tv28 ?tv29)) (max (mainNew ?tv29) (mainNew ?tv28)))
  (=== synduce-list-maxhom (inp0) (CList) (main inp0) (mainNew inp0))
)
