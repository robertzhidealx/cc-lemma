(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data CList (Cnil Single Concat))
  (:: Cnil (-> (Unit) CList))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> (CList CList) CList))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (:: cat (-> (List List) List))
  (let cat (?tv4 (Cons ?tv6 ?tv7)) (Cons ?tv6 (cat ?tv4 ?tv7)))
  (let cat (?tv4 (Nil ?tv8)) ?tv4)
  (:: repr (-> (CList) List))
  (let repr ((Cnil ?tv12)) (Nil Null))
  (let repr ((Single ?tv13)) (Cons ?tv13 (Nil Null)))
  (let repr ((Concat ?tv14 ?tv15)) (cat (repr ?tv15) (repr ?tv14)))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: spec (-> (List) Nat))
  (let spec ((Nil ?tv19)) Zero)
  (let spec ((Cons ?tv20 ?tv21)) (plus ?tv20 (spec ?tv21)))
  (:: main (-> (CList) Nat))
  (let main (?tv22) (spec (repr ?tv22)))
  (:: mainNew (-> (CList) Nat))
  (let mainNew ((Cnil ?tv26)) Zero)
  (let mainNew ((Single ?tv27)) ?tv27)
  (let mainNew ((Concat ?tv28 ?tv29)) (plus (mainNew ?tv28) (mainNew ?tv29)))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
