(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite1 (gq ?tv0 ?tv1) ?tv0 ?tv1))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Nat Nat) Tuple2))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: spec (-> (List) Tuple2))
  (let spec ((Nil ?tv5)) (MakeTuple2 Zero Zero))
  (let spec ((Cons ?tv6 ?tv7)) (MakeTuple2 (plus ?tv6 (fst2 (spec ?tv7))) (max Zero (plus ?tv6 (snd2 (spec ?tv7))))))
  (:: tf3 (-> (Nat List) List))
  (let tf3 (?tv13 (Nil ?tv14)) (Cons ?tv13 (Nil Null)))
  (let tf3 (?tv13 (Cons ?tv15 ?tv16)) (Cons ?tv15 (tf2 ?tv16 ?tv13)))
  (:: tf2 (-> (List Nat) List))
  (let tf2 (?tv10 ?tv11) (tf3 ?tv11 ?tv10))
  (:: snoc (-> (List Nat) List))
  (let snoc (?tv8 ?tv9) (tf2 ?tv8 ?tv9))
  (:: repr (-> (List List) List))
  (let repr (?tv21 (Nil ?tv22)) ?tv21)
  (let repr (?tv21 (Cons ?tv23 ?tv24)) (repr (snoc ?tv21 ?tv23) ?tv24))
  (:: main (-> (List) Nat))
  (let main (?tv25) (snd2 (spec (repr (Nil Null) ?tv25))))
  (:: reprNew (-> (Tuple2 List) Tuple2))
  (let reprNew (?tv30 (Nil ?tv31)) ?tv30)
  (let reprNew (?tv30 (Cons ?tv32 ?tv33)) (reprNew (MakeTuple2 (max (fst2 ?tv30) (plus ?tv32 (snd2 ?tv30))) (plus ?tv32 (snd2 ?tv30))) ?tv33))
  (:: mainNew (-> (List) Nat))
  (let mainNew (?tv34) (fst2 (reprNew (MakeTuple2 Zero Zero) ?tv34)))
  (=== optimize (inp0) (List) (main inp0) (mainNew inp0))
)
