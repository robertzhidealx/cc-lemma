(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data List (Cons Nil))
  (:: Cons (-> (Bool List) List))
  (:: Nil (-> (Unit) List))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: dropwhile (-> (Nat List) Nat))
  (let dropwhile (?tv14 (Nil ?tv15)) ?tv14)
  (let dropwhile (?tv14 (Cons ?tv16 ?tv17)) (ite1 ?tv16 ?tv14 (dropwhile (plus (Succ Zero) ?tv14) ?tv17)))
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: mainNew (-> (List) Nat))
  (let mainNew ((Nil ?tv23)) Zero)
  (let mainNew ((Cons ?tv24 ?tv25)) (ite1 (not ?tv24) (plus (Succ Zero) (mainNew ?tv25)) Zero))
  (=== autolifter_single_pass_dropwhile (inp0) (List) (dropwhile Zero inp0) (mainNew inp0))
)
