(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (data CList (Single Concat))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> (CList CList) CList))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv0 ?tv1) (ite2 (lq ?tv0 ?tv1) ?tv0 ?tv1))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Nat) Tuple3))
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: spec (-> (List) Tuple3))
  (let spec ((Elt ?tv5)) (MakeTuple3 ?tv5 (Succ Zero)))
  (let spec ((Cons ?tv6 ?tv7)) (MakeTuple3 (min (fst3 (spec ?tv7)) ?tv6) (ite2 (lq ?tv6 (fst3 (spec ?tv7))) (Succ Zero) (plus (snd3 (spec ?tv7)) (ite2 (nateq ?tv6 (fst3 (spec ?tv7))) (Succ Zero) Zero)))))
  (:: cat (-> (List List) List))
  (let cat (?tv13 (Elt ?tv14)) (Cons ?tv14 ?tv13))
  (let cat (?tv13 (Cons ?tv15 ?tv16)) (Cons ?tv15 (cat ?tv13 ?tv16)))
  (:: repr (-> (CList) List))
  (let repr ((Single ?tv20)) (Elt ?tv20))
  (let repr ((Concat ?tv21 ?tv22)) (cat (repr ?tv22) (repr ?tv21)))
  (:: main (-> (CList) Nat))
  (let main (?tv23) (snd3 (spec (repr ?tv23))))
  (:: mainNew (-> (CList) Tuple3))
  (let mainNew ((Single ?tv27)) (MakeTuple3 (Succ Zero) ?tv27))
  (let mainNew ((Concat ?tv28 ?tv29)) (MakeTuple3 (ite2 (lq (snd3 (mainNew ?tv28)) (snd3 (mainNew ?tv29))) (fst3 (mainNew ?tv28)) (ite2 (nateq (snd3 (mainNew ?tv29)) (snd3 (mainNew ?tv28))) (plus (fst3 (mainNew ?tv29)) (fst3 (mainNew ?tv28))) (fst3 (mainNew ?tv29)))) (min (snd3 (mainNew ?tv29)) (snd3 (mainNew ?tv28)))))
  (=== optimize (inp0) (CList) (main inp0) (fst3 (mainNew inp0)))
)
