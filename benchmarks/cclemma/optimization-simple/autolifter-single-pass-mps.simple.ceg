(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Unit (Null))
  (:: Null Unit)
  (data List (Cons Nil))
  (:: Cons (-> (Nat List) List))
  (:: Nil (-> (Unit) List))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: mps (-> (List) Nat))
  (let mps ((Nil ?tv13)) Zero)
  (let mps ((Cons ?tv14 ?tv15)) (ite1 (lq Zero (plus (mps ?tv15) ?tv14)) Zero (plus (mps ?tv15) ?tv14)))
  (:: mainNew (-> (List) Nat))
  (let mainNew ((Nil ?tv21)) Zero)
  (let mainNew ((Cons ?tv22 ?tv23)) (ite1 (lq (plus ?tv22 (mainNew ?tv23)) Zero) (plus ?tv22 (mainNew ?tv23)) Zero))
  (=== autolifter_single_pass_mps (inp0) (List) (mps inp0) (mainNew inp0))
)
