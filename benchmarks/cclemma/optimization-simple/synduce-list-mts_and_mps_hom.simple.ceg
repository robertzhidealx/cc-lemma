(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (data CList (Cnil Single Concat))
  (:: Cnil (-> (Unit) CList))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> (CList CList) CList))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite2 (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Nat Nat) Tuple3))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x0)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x1)
  (:: third3 (-> (Tuple3) Nat))
  (let third3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x2)
  (:: tf1 (-> (List) Tuple3))
  (let tf1 ((Nil ?tv5)) (MakeTuple3 Zero Zero Zero))
  (let tf1 ((Cons ?tv6 ?tv7)) (MakeTuple3 (plus ?tv6 (fst3 (tf1 ?tv7))) (max Zero (plus ?tv6 (snd3 (tf1 ?tv7)))) (max (third3 (tf1 ?tv7)) (plus ?tv6 (fst3 (tf1 ?tv7))))))
  (data Tuple4 (MakeTuple4))
  (:: MakeTuple4 (-> (Nat Nat) Tuple4))
  (:: spec (-> (List) Tuple4))
  (let spec (?tv2) (MakeTuple4 (snd3 (tf1 ?tv2)) (third3 (tf1 ?tv2))))
  (:: cat (-> (List List) List))
  (let cat (?tv13 (Nil ?tv14)) ?tv13)
  (let cat (?tv13 (Cons ?tv15 ?tv16)) (Cons ?tv15 (cat ?tv13 ?tv16)))
  (:: repr (-> (CList) List))
  (let repr ((Cnil ?tv20)) (Nil Null))
  (let repr ((Single ?tv21)) (Cons ?tv21 (Nil Null)))
  (let repr ((Concat ?tv22 ?tv23)) (cat (repr ?tv23) (repr ?tv22)))
  (:: main (-> (CList) Tuple4))
  (let main (?tv24) (spec (repr ?tv24)))
  (:: reprNew (-> (CList) Tuple3))
  (let reprNew ((Cnil ?tv28)) (MakeTuple3 Zero Zero Zero))
  (let reprNew ((Single ?tv29)) (MakeTuple3 (max ?tv29 Zero) (ite2 (lq ?tv29 Zero) Zero ?tv29) ?tv29))
  (let reprNew ((Concat ?tv30 ?tv31)) (MakeTuple3 (max (fst3 (reprNew ?tv30)) (plus (fst3 (reprNew ?tv31)) (third3 (reprNew ?tv30)))) (ite2 (lq (plus (third3 (reprNew ?tv31)) (snd3 (reprNew ?tv30))) (snd3 (reprNew ?tv31))) (snd3 (reprNew ?tv31)) (plus (third3 (reprNew ?tv31)) (snd3 (reprNew ?tv30)))) (plus (third3 (reprNew ?tv31)) (third3 (reprNew ?tv30)))))
  (:: mainNew (-> (CList) Tuple4))
  (let mainNew (?tv32) (MakeTuple4 (fst3 (reprNew ?tv32)) (snd3 (reprNew ?tv32))))
  (=== synduce_list_mts_and_mps_hom (inp0) (CList) (main inp0) (mainNew inp0))
)
