(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (data IDList (Inil Icons))
  (:: Inil (-> (Unit) IDList))
  (:: Icons (-> (Nat Nat IDList) IDList))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: length (-> (IDList) Nat))
  (let length ((Inil ?tv3)) Zero)
  (let length ((Icons ?tv4 ?tv5 ?tv6)) (plus (Succ Zero) (length ?tv6)))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: isindexed (-> (IDList) Bool))
  (let isindexed ((Inil ?tv10)) True)
  (let isindexed ((Icons ?tv11 ?tv12 ?tv13)) (and (isindexed ?tv13) (nateq ?tv12 (length ?tv13))))
  (:: repr (-> (IDList) List))
  (let repr ((Inil ?tv17)) (Nil Null))
  (let repr ((Icons ?tv18 ?tv19 ?tv20)) (Cons ?tv18 (repr ?tv20)))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: max (-> (Nat) Nat))
  (let max (?tv21) (ite2 (gq ?tv21 Zero) ?tv21 Zero))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Nat) Tuple3))
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: spec (-> (List) Tuple3))
  (let spec ((Nil ?tv26)) (MakeTuple3 Zero Zero))
  (let spec ((Cons ?tv27 ?tv28)) (MakeTuple3 (ite2 (gq ?tv27 (snd3 (spec ?tv28))) (max (plus (fst3 (spec ?tv28)) ?tv27)) (fst3 (spec ?tv28))) (plus (snd3 (spec ?tv28)) (Succ Zero))))
  (:: ite3 (-> (Bool Tuple3) Tuple3))
  (let ite3 (True ?x) ?x)
  (let ite3 (False ?x) (MakeTuple3 Zero Zero))
  (:: main (-> (IDList) Tuple3))
  (let main (?tv37) (ite3 (isindexed ?tv37) (spec (repr ?tv37))))
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: targetNew (-> (IDList) Tuple3))
  (let targetNew ((Inil ?tv41)) (MakeTuple3 Zero Zero))
  (let targetNew ((Icons ?tv42 ?tv43 ?tv44)) (MakeTuple3 (ite2 (leq ?tv42 (snd3 (targetNew ?tv44))) (fst3 (targetNew ?tv44)) (plus (fst3 (targetNew ?tv44)) ?tv42)) (plus (Succ Zero) (snd3 (targetNew ?tv44)))))
  (:: mainNew (-> (IDList) Tuple3))
  (let mainNew (?tv45) (ite3 (isindexed ?tv45) (MakeTuple3 (fst3 (targetNew ?tv45)) (snd3 (targetNew ?tv45)))))
  (=== optimize (inp0) (IDList) (main inp0) (mainNew inp0))
)
