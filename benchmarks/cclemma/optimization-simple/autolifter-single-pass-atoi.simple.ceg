(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Unit (Null))
  (:: Null Unit)
  (data List (Cons Nil))
  (:: Cons (-> (Nat List) List))
  (:: Nil (-> (Unit) List))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: times (-> (Nat Nat) Nat))
  (let times (Zero ?x) Zero)
  (let times ((Succ ?x) ?y) (plus (times ?x ?y) ?y))
  (:: atoi (-> (List) Nat))
  (let atoi ((Nil ?tv13)) Zero)
  (let atoi ((Cons ?tv14 ?tv15)) (plus (times (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ Zero)))))))))) (atoi ?tv15)) ?tv14))
  (:: mainNew (-> (List) Nat))
  (let mainNew ((Nil ?tv21)) Zero)
  (let mainNew ((Cons ?tv22 ?tv23)) (plus ?tv22 (times (mainNew ?tv23) (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ Zero)))))))))))))
  (=== autolifter-single-pass-atoi (inp0) (List) (atoi inp0) (mainNew inp0))
)
