(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Empty Node))
  (:: Empty (-> (Unit) Tree))
  (:: Node (-> (Nat Tree Tree) Tree))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite2 (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (:: tf1 (-> (List Tree) List))
  (let tf1 (?tv6 (Empty ?tv7)) ?tv6)
  (let tf1 (?tv6 (Node ?tv8 ?tv9 ?tv10)) (Cons ?tv8 (tf1 (tf1 ?tv6 ?tv9) ?tv10)))
  (:: repr (-> (Tree) List))
  (let repr ((Empty ?tv13)) (Nil Null))
  (let repr ((Node ?tv14 ?tv15 ?tv16)) (Cons ?tv14 (tf1 (repr ?tv15) ?tv16)))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Nat) Tuple3))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: spec (-> (List) Tuple3))
  (let spec ((Nil ?tv27)) (MakeTuple3 Zero Zero))
  (let spec ((Cons ?tv28 ?tv29)) (MakeTuple3 (plus ?tv28 (fst3 (spec ?tv29))) (max (snd3 (spec ?tv29)) (plus ?tv28 (fst3 (spec ?tv29))))))
  (:: main (-> (Tree) Tuple3))
  (let main (?tv30) (spec (repr ?tv30)))
  (:: targetNew (-> (Tree) Tuple3))
  (let targetNew ((Empty ?tv34)) (MakeTuple3 Zero Zero))
  (let targetNew ((Node ?tv35 ?tv36 ?tv37)) (MakeTuple3 (plus (plus (fst3 (targetNew ?tv37)) (fst3 (targetNew ?tv36))) ?tv35) (ite2 (lq (max (plus (snd3 (targetNew ?tv37)) (fst3 (targetNew ?tv36))) (snd3 (targetNew ?tv36))) (plus (fst3 (targetNew ?tv37)) (max (plus (fst3 (targetNew ?tv36)) ?tv35) (fst3 (targetNew ?tv36))))) (plus (fst3 (targetNew ?tv37)) (max (plus (fst3 (targetNew ?tv36)) ?tv35) (fst3 (targetNew ?tv36)))) (max (plus (snd3 (targetNew ?tv37)) (fst3 (targetNew ?tv36))) (snd3 (targetNew ?tv36))))))
  (:: mainNew (-> (Tree) Tuple3))
  (let mainNew (?tv38) (MakeTuple3 (fst3 (targetNew ?tv38)) (snd3 (targetNew ?tv38))))
  (=== synduce-list_to_tree-mls (inp0) (Tree) (main inp0) (mainNew inp0))
)
