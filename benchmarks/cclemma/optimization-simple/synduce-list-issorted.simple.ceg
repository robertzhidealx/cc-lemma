(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data SList (Elt Cons))
  (:: Elt (-> (Nat) SList))
  (:: Cons (-> (Nat SList) SList))
  (data CList (Single Concat))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> (CList CList) CList))
  (:: catlist (-> (SList SList) SList))
  (let catlist (?tv5 (Elt ?tv6)) (Cons ?tv6 ?tv5))
  (let catlist (?tv5 (Cons ?tv7 ?tv8)) (Cons ?tv7 (catlist ?tv5 ?tv8)))
  (:: repr (-> (CList) SList))
  (let repr ((Single ?tv12)) (Elt ?tv12))
  (let repr ((Concat ?tv13 ?tv14)) (catlist (repr ?tv14) (repr ?tv13)))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Nat Nat Bool) Tuple2))
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((MakeTuple2 ?x0 ?x1 ?x2)) ?x1)
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: third2 (-> (Tuple2) Bool))
  (let third2 ((MakeTuple2 ?x0 ?x1 ?x2)) ?x2)
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((MakeTuple2 ?x0 ?x1 ?x2)) ?x0)
  (:: spec (-> (SList) Tuple2))
  (let spec ((Elt ?tv18)) (MakeTuple2 ?tv18 ?tv18 True))
  (let spec ((Cons ?tv19 ?tv20)) (MakeTuple2 ?tv19 (snd2 (spec ?tv20)) (and (third2 (spec ?tv20)) (lq ?tv19 (fst2 (spec ?tv20))))))
  (:: main (-> (CList) Bool))
  (let main (?tv21) (third2 (spec (repr ?tv21))))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Bool Nat Nat) Tuple3))
  (:: fst3 (-> (Tuple3) Bool))
  (let fst3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x0)
  (:: third3 (-> (Tuple3) Nat))
  (let third3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x2)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x1)
  (:: mainNew (-> (CList) Tuple3))
  (let mainNew ((Single ?tv25)) (MakeTuple3 True ?tv25 ?tv25))
  (let mainNew ((Concat ?tv26 ?tv27)) (MakeTuple3 (and (and (fst3 (mainNew ?tv26)) (fst3 (mainNew ?tv27))) (lq (third3 (mainNew ?tv26)) (snd3 (mainNew ?tv27)))) (snd3 (mainNew ?tv26)) (third3 (mainNew ?tv27))))
  (=== synduce-list-issorted (inp0) (CList) (main inp0) (fst3 (mainNew inp0)))
)
