(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: spec (-> (List) Nat))
  (let spec ((Nil ?tv3)) Zero)
  (let spec ((Cons ?tv4 ?tv5)) (plus ?tv4 (spec ?tv5)))
  (:: snoc (-> (Nat List) List))
  (let snoc (?tv11 (Nil ?tv12)) (Cons ?tv11 (Nil Null)))
  (let snoc (?tv11 (Cons ?tv13 ?tv14)) (Cons ?tv13 (snoc ?tv11 ?tv14)))
  (:: repr (-> (List List) List))
  (let repr (?tv19 (Nil ?tv20)) ?tv19)
  (let repr (?tv19 (Cons ?tv21 ?tv22)) (repr (snoc ?tv21 ?tv19) ?tv22))
  (:: main (-> (List) Nat))
  (let main (?tv23) (spec (repr (Nil Null) ?tv23)))
  (:: mainNew (-> (Nat List) Nat))
  (let mainNew (?tv28 (Nil ?tv29)) ?tv28)
  (let mainNew (?tv28 (Cons ?tv30 ?tv31)) (mainNew (plus ?tv28 ?tv30) ?tv31))
  (=== synduce_tailopt_sum (inp0) (List) (main inp0) (mainNew Zero inp0))
)
