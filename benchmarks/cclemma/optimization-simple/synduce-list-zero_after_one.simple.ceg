(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data BList (Nil Cons))
  (:: Nil (-> (Unit) BList))
  (:: Cons (-> (Bool BList) BList))
  (data CList (Emp Single Concat))
  (:: Emp (-> (Unit) CList))
  (:: Single (-> (Bool) CList))
  (:: Concat (-> (CList CList) CList))
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: catlist (-> (BList BList) BList))
  (let catlist (?tv7 (Nil ?tv8)) ?tv7)
  (let catlist (?tv7 (Cons ?tv9 ?tv10)) (Cons ?tv9 (catlist ?tv7 ?tv10)))
  (:: repr (-> (CList) BList))
  (let repr ((Emp ?tv14)) (Nil Null))
  (let repr ((Single ?tv15)) (Cons ?tv15 (Nil Null)))
  (let repr ((Concat ?tv16 ?tv17)) (catlist (repr ?tv17) (repr ?tv16)))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Bool Bool Bool) Tuple2))
  (:: fst2 (-> (Tuple2) Bool))
  (let fst2 ((MakeTuple2 ?x0 ?x1 ?x2)) ?x0)
  (:: snd2 (-> (Tuple2) Bool))
  (let snd2 ((MakeTuple2 ?x0 ?x1 ?x2)) ?x1)
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: third2 (-> (Tuple2) Bool))
  (let third2 ((MakeTuple2 ?x0 ?x1 ?x2)) ?x2)
  (:: spec (-> (BList) Tuple2))
  (let spec ((Nil ?tv21)) (MakeTuple2 False False False))
  (let spec ((Cons ?tv22 ?tv23)) (MakeTuple2 (or (fst2 (spec ?tv23)) ?tv22) (or (snd2 (spec ?tv23)) (and (fst2 (spec ?tv23)) (not ?tv22))) (or (third2 (spec ?tv23)) (not ?tv22))))
  (:: main (-> (CList) Bool))
  (let main (?tv24) (snd2 (spec (repr ?tv24))))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Bool Bool Bool Bool) Tuple3))
  (:: snd3 (-> (Tuple3) Bool))
  (let snd3 ((MakeTuple3 ?x0 ?x1 ?x2 ?x3)) ?x1)
  (:: third3 (-> (Tuple3) Bool))
  (let third3 ((MakeTuple3 ?x0 ?x1 ?x2 ?x3)) ?x2)
  (:: fst3 (-> (Tuple3) Bool))
  (let fst3 ((MakeTuple3 ?x0 ?x1 ?x2 ?x3)) ?x0)
  (:: fourth3 (-> (Tuple3) Bool))
  (let fourth3 ((MakeTuple3 ?x0 ?x1 ?x2 ?x3)) ?x3)
  (:: mainNew (-> (CList) Tuple3))
  (let mainNew ((Emp ?tv28)) (MakeTuple3 False True True False))
  (let mainNew ((Single ?tv29)) (MakeTuple3 False ?tv29 False False))
  (let mainNew ((Concat ?tv30 ?tv31)) (MakeTuple3 (or (or (and (and (not (snd3 (mainNew ?tv30))) (not (third3 (mainNew ?tv31)))) (or (fst3 (mainNew ?tv31)) (snd3 (mainNew ?tv31)))) (and (and (or (fst3 (mainNew ?tv31)) (fourth3 (mainNew ?tv30))) (not (third3 (mainNew ?tv31)))) (or (fst3 (mainNew ?tv31)) (snd3 (mainNew ?tv31))))) (or (fst3 (mainNew ?tv31)) (fst3 (mainNew ?tv30)))) (or (and (snd3 (mainNew ?tv31)) (snd3 (mainNew ?tv30))) (and (snd3 (mainNew ?tv30)) (not (third3 (mainNew ?tv30))))) (and (third3 (mainNew ?tv31)) (third3 (mainNew ?tv30))) (or (or (and (and (not (snd3 (mainNew ?tv31))) (not (third3 (mainNew ?tv30)))) (or (snd3 (mainNew ?tv31)) (snd3 (mainNew ?tv30)))) (and (and (not (snd3 (mainNew ?tv30))) (not (third3 (mainNew ?tv31)))) (or (snd3 (mainNew ?tv31)) (fourth3 (mainNew ?tv31))))) (or (fourth3 (mainNew ?tv31)) (fourth3 (mainNew ?tv30))))))
  (=== optimize (inp0) (CList) (main inp0) (fst3 (mainNew inp0)))
)
