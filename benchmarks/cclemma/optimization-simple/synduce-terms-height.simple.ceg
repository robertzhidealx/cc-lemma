(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data ArithOp (APlus AMinus AGt))
  (:: APlus (-> (Unit) ArithOp))
  (:: AMinus (-> (Unit) ArithOp))
  (:: AGt (-> (Unit) ArithOp))
  (data BoolOp (BNot BAnd BOr BEq))
  (:: BNot (-> (Unit) BoolOp))
  (:: BAnd (-> (Unit) BoolOp))
  (:: BOr (-> (Unit) BoolOp))
  (:: BEq (-> (Unit) BoolOp))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Term (TArithBin TBoolBin TArithUn TBoolUn TVar TCInt TCBool))
  (:: TArithBin (-> (ArithOp Term Term) Term))
  (:: TBoolBin (-> (BoolOp Term Term) Term))
  (:: TArithUn (-> (ArithOp Term) Term))
  (:: TBoolUn (-> (BoolOp Term) Term))
  (:: TVar (-> (Nat) Term))
  (:: TCInt (-> (Nat) Term))
  (:: TCBool (-> (Bool) Term))
  (data Op (OpPlus OpMinus OpNot OpAnd OpOr OpGt OpEq))
  (:: OpPlus (-> (Unit) Op))
  (:: OpMinus (-> (Unit) Op))
  (:: OpNot (-> (Unit) Op))
  (:: OpAnd (-> (Unit) Op))
  (:: OpOr (-> (Unit) Op))
  (:: OpGt (-> (Unit) Op))
  (:: OpEq (-> (Unit) Op))
  (data Term2 (Bin Un Var CInt CBool))
  (:: Bin (-> (Op Term2 Term2) Term2))
  (:: Un (-> (Op Term2) Term2))
  (:: Var (-> (Nat) Term2))
  (:: CInt (-> (Nat) Term2))
  (:: CBool (-> (Bool) Term2))
  (:: mkbin (-> (Term Term Op) Term))
  (let mkbin (?tv4 ?tv3 (OpPlus ?tv5)) (TArithBin (APlus Null) ?tv4 ?tv3))
  (let mkbin (?tv4 ?tv3 (OpMinus ?tv6)) (TArithBin (AMinus Null) ?tv4 ?tv3))
  (let mkbin (?tv4 ?tv3 (OpNot ?tv7)) (TBoolBin (BNot Null) ?tv4 ?tv3))
  (let mkbin (?tv4 ?tv3 (OpAnd ?tv8)) (TBoolBin (BAnd Null) ?tv4 ?tv3))
  (let mkbin (?tv4 ?tv3 (OpOr ?tv9)) (TBoolBin (BOr Null) ?tv4 ?tv3))
  (let mkbin (?tv4 ?tv3 (OpGt ?tv10)) (TArithBin (AGt Null) ?tv4 ?tv3))
  (let mkbin (?tv4 ?tv3 (OpEq ?tv11)) (TBoolBin (BEq Null) ?tv4 ?tv3))
  (:: mkun (-> (Term Op) Term))
  (let mkun (?tv14 (OpPlus ?tv15)) (TArithUn (APlus Null) ?tv14))
  (let mkun (?tv14 (OpMinus ?tv16)) (TArithUn (AMinus Null) ?tv14))
  (let mkun (?tv14 (OpNot ?tv17)) (TBoolUn (BNot Null) ?tv14))
  (let mkun (?tv14 (OpAnd ?tv18)) (TBoolUn (BAnd Null) ?tv14))
  (let mkun (?tv14 (OpOr ?tv19)) (TBoolUn (BOr Null) ?tv14))
  (let mkun (?tv14 (OpGt ?tv20)) (TArithUn (AGt Null) ?tv14))
  (let mkun (?tv14 (OpEq ?tv21)) (TBoolUn (BEq Null) ?tv14))
  (:: repr (-> (Term2) Term))
  (let repr ((Bin ?tv25 ?tv26 ?tv27)) (mkbin (repr ?tv26) (repr ?tv27) ?tv25))
  (let repr ((Un ?tv28 ?tv29)) (mkun (repr ?tv29) ?tv28))
  (let repr ((Var ?tv30)) (TVar ?tv30))
  (let repr ((CInt ?tv31)) (TCInt ?tv31))
  (let repr ((CBool ?tv32)) (TCBool ?tv32))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite6 (-> (Bool Nat Nat) Nat))
  (let ite6 (True ?x ?y) ?x)
  (let ite6 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv33 ?tv34) (ite6 (lq ?tv33 ?tv34) ?tv34 ?tv33))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: spec (-> (Term) Nat))
  (let spec ((TArithBin ?tv38 ?tv39 ?tv40)) (plus (Succ Zero) (max (spec ?tv39) (spec ?tv40))))
  (let spec ((TBoolBin ?tv41 ?tv42 ?tv43)) (plus (Succ Zero) (max (spec ?tv42) (spec ?tv43))))
  (let spec ((TArithUn ?tv44 ?tv45)) (plus (Succ Zero) (spec ?tv45)))
  (let spec ((TBoolUn ?tv46 ?tv47)) (plus (Succ Zero) (spec ?tv47)))
  (let spec ((TVar ?tv48)) (Succ Zero))
  (let spec ((TCInt ?tv49)) (Succ Zero))
  (let spec ((TCBool ?tv50)) (Succ Zero))
  (:: main (-> (Term2) Nat))
  (let main (?tv62) (spec (repr ?tv62)))
  (:: mainNew (-> (Term2) Nat))
  (let mainNew ((Bin ?tv66 ?tv67 ?tv68)) (plus (Succ Zero) (max (mainNew ?tv67) (mainNew ?tv68))))
  (let mainNew ((Un ?tv69 ?tv70)) (plus (Succ Zero) (mainNew ?tv70)))
  (let mainNew ((Var ?tv71)) (Succ Zero))
  (let mainNew ((CInt ?tv72)) (Succ Zero))
  (let mainNew ((CBool ?tv73)) (Succ Zero))
  (=== synduce-terms-height (inp0) (Term2) (main inp0) (mainNew inp0))
)
