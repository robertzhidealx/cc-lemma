(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Unit (Null))
  (:: Null Unit)
  (data List (Cons Nil))
  (:: Cons (-> (Nat List) List))
  (:: Nil (-> (Unit) List))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv10 ?tv11) (ite1 (lq ?tv10 ?tv11) ?tv11 ?tv10))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: mis (-> (Nat Nat List) Nat))
  (let mis (?tv17 ?tv18 (Nil ?tv19)) (max ?tv18 ?tv17))
  (let mis (?tv17 ?tv18 (Cons ?tv20 ?tv21)) (mis (max ?tv18 ?tv17) (plus ?tv20 ?tv17) ?tv21))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Nat Nat) Tuple2))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: mainNew (-> (List) Tuple2))
  (let mainNew ((Nil ?tv27)) (MakeTuple2 Zero Zero))
  (let mainNew ((Cons ?tv28 ?tv29)) (MakeTuple2 (ite1 (lq (fst2 (mainNew ?tv29)) (plus ?tv28 (snd2 (mainNew ?tv29)))) (plus ?tv28 (snd2 (mainNew ?tv29))) (fst2 (mainNew ?tv29))) (fst2 (mainNew ?tv29))))
  (=== autolifter_single_pass_mis (inp0) (List) (mis Zero Zero inp0) (fst2 (mainNew inp0)))
)
