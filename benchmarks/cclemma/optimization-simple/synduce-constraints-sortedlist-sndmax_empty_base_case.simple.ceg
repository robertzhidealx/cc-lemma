(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data CList (Empty Elt Concat))
  (:: Empty (-> (Unit) CList))
  (:: Elt (-> (Nat) CList))
  (:: Concat (-> (CList CList) CList))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (:: cat (-> (List List) List))
  (let cat (?tv5 (Nil ?tv6)) ?tv5)
  (let cat (?tv5 (Cons ?tv7 ?tv8)) (Cons ?tv7 (cat ?tv5 ?tv8)))
  (:: repr (-> (CList) List))
  (let repr ((Empty ?tv12)) (Nil Null))
  (let repr ((Elt ?tv13)) (Cons ?tv13 (Nil Null)))
  (let repr ((Concat ?tv14 ?tv15)) (cat (repr ?tv15) (repr ?tv14)))
  (:: geq (-> (Nat Nat) Bool))
  (let geq (Zero (Succ ?x)) False)
  (let geq (?x Zero) True)
  (let geq ((Succ ?x) (Succ ?y)) (geq ?x ?y))
  (:: geqhead (-> (Nat List) Bool))
  (let geqhead (?tv18 (Nil ?tv19)) True)
  (let geqhead (?tv18 (Cons ?tv20 ?tv21)) (geq ?tv18 ?tv20))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: issorted (-> (List) Bool))
  (let issorted ((Nil ?tv25)) True)
  (let issorted ((Cons ?tv26 ?tv27)) (and (geqhead ?tv26 ?tv27) (issorted ?tv27)))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv28 ?tv29) (ite2 (lq ?tv28 ?tv29) ?tv28 ?tv29))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv30 ?tv31) (ite2 (gq ?tv30 ?tv31) ?tv30 ?tv31))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Nat) Tuple3))
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: spec (-> (List) Tuple3))
  (let spec ((Nil ?tv35)) (MakeTuple3 Zero Zero))
  (let spec ((Cons ?tv36 ?tv37)) (MakeTuple3 (max (fst3 (spec ?tv37)) ?tv36) (max (snd3 (spec ?tv37)) (min (fst3 (spec ?tv37)) ?tv36))))
  (:: cat0 (-> (CList CList) CList))
  (let cat0 (?tv41 (Empty ?tv42)) ?tv41)
  (let cat0 (?tv41 (Elt ?tv43)) ?tv41)
  (let cat0 (?tv41 (Concat ?tv44 ?tv45)) (Concat (cat0 ?tv44 ?tv44) (cat0 ?tv45 ?tv45)))
  (:: main (-> (CList) Nat))
  (let main (?tv46) (ite2 (issorted (repr ?tv46)) (snd3 (spec (repr (cat0 ?tv46 ?tv46)))) Zero))
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: targetNew (-> (CList) Tuple3))
  (let targetNew ((Empty ?tv50)) (MakeTuple3 Zero Zero))
  (let targetNew ((Elt ?tv51)) (MakeTuple3 Zero (max ?tv51 Zero)))
  (let targetNew ((Concat ?tv52 ?tv53)) (MakeTuple3 (ite2 (and (lq (fst3 (targetNew ?tv52)) (snd3 (targetNew ?tv52))) (nateq (fst3 (targetNew ?tv52)) Zero)) (snd3 (targetNew ?tv53)) (ite2 (nateq (fst3 (targetNew ?tv52)) Zero) (plus (fst3 (targetNew ?tv52)) (fst3 (targetNew ?tv53))) (fst3 (targetNew ?tv52)))) (max (snd3 (targetNew ?tv52)) (snd3 (targetNew ?tv53)))))
  (:: mainNew (-> (CList) Nat))
  (let mainNew (?tv54) (ite2 (issorted (repr ?tv54)) (fst3 (targetNew ?tv54)) Zero))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
