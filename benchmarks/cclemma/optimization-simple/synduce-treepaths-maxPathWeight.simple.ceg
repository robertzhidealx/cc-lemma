(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data BTree (Empty Node))
  (:: Empty (-> (Unit) BTree))
  (:: Node (-> (Nat BTree BTree) BTree))
  (data Zipper (Top Left Right))
  (:: Top (-> (Unit) Zipper))
  (:: Left (-> (Nat BTree Zipper) Zipper))
  (:: Right (-> (Nat BTree Zipper) Zipper))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite2 (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: mpath (-> (BTree) Nat))
  (let mpath ((Empty ?tv5)) Zero)
  (let mpath ((Node ?tv6 ?tv7 ?tv8)) (plus ?tv6 (max (mpath ?tv7) (mpath ?tv8))))
  (:: repr (-> (Zipper) BTree))
  (let repr ((Top ?tv12)) (Empty Null))
  (let repr ((Left ?tv13 ?tv14 ?tv15)) (Node ?tv13 ?tv14 (repr ?tv15)))
  (let repr ((Right ?tv16 ?tv17 ?tv18)) (Node ?tv16 (repr ?tv18) ?tv17))
  (:: main (-> (Zipper) Nat))
  (let main (?tv19) (mpath (repr ?tv19)))
  (:: mainNew (-> (Zipper) Nat))
  (let mainNew ((Top ?tv23)) Zero)
  (let mainNew ((Left ?tv24 ?tv25 ?tv26)) (plus ?tv24 (max (mainNew ?tv26) (mpath ?tv25))))
  (let mainNew ((Right ?tv27 ?tv28 ?tv29)) (plus ?tv27 (max (mainNew ?tv29) (mpath ?tv28))))
  (=== synduce_treepaths_maxPathWeight (inp0) (Zipper) (main inp0) (mainNew inp0))
)
