(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (data NList (Single Ncons))
  (:: Single (-> (List) NList))
  (:: Ncons (-> (List NList) NList))
  (:: map (-> (NList) List))
  (let map ((Single ?tv6)) (Cons (product ?tv6) (Nil Null)))
  (let map ((Ncons ?tv7 ?tv8)) (Cons (product ?tv7) (map ?tv8)))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: sum (-> (List) Nat))
  (let sum ((Nil ?tv12)) Zero)
  (let sum ((Cons ?tv13 ?tv14)) (plus ?tv13 (sum ?tv14)))
  (:: times (-> (Nat Nat) Nat))
  (let times (Zero ?x) Zero)
  (let times ((Succ ?x) ?y) (plus (times ?x ?y) ?y))
  (:: product (-> (List) Nat))
  (let product ((Nil ?tv18)) (Succ Zero))
  (let product ((Cons ?tv19 ?tv20)) (times ?tv19 (product ?tv20)))
  (:: tails (-> (List List) NList))
  (let tails (?tv24 (Nil ?tv25)) (Single ?tv24))
  (let tails (?tv24 (Cons ?tv26 ?tv27)) (Ncons ?tv24 (tails ?tv27 ?tv27)))
  (:: main (-> (List) Nat))
  (let main (?tv28) (sum (map (tails ?tv28 ?tv28))))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Nat Nat) Tuple2))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: mainNew (-> (List) Tuple2))
  (let mainNew ((Nil ?tv32)) (MakeTuple2 (Succ Zero) (Succ Zero)))
  (let mainNew ((Cons ?tv33 ?tv34)) (MakeTuple2 (plus (fst2 (mainNew ?tv34)) (times ?tv33 (snd2 (mainNew ?tv34)))) (times ?tv33 (snd2 (mainNew ?tv34)))))
  (=== fusion_identities_page5 (inp0) (List) (main inp0) (fst2 (mainNew inp0)))
)
