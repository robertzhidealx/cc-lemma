(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Leaf Node))
  (:: Leaf (-> (Nat) Tree))
  (:: Node (-> (Nat Tree Tree) Tree))
  (data Tuple1 (MakeTuple1))
  (:: MakeTuple1 (-> (Nat Bool) Tuple1))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: fst1 (-> (Tuple1) Nat))
  (let fst1 ((MakeTuple1 ?x0 ?x1)) ?x0)
  (:: snd1 (-> (Tuple1) Bool))
  (let snd1 ((MakeTuple1 ?x0 ?x1)) ?x1)
  (:: spec (-> (Tree) Tuple1))
  (let spec ((Leaf ?tv3)) (MakeTuple1 ?tv3 True))
  (let spec ((Node ?tv4 ?tv5 ?tv6)) (MakeTuple1 ?tv4 (and (and (and (lq (fst1 (spec ?tv5)) ?tv4) (lq ?tv4 (fst1 (spec ?tv6)))) (snd1 (spec ?tv5))) (snd1 (spec ?tv6)))))
  (:: main (-> (Tree) Bool))
  (let main (?tv14) (snd1 (spec ?tv14)))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Bool Nat) Tuple2))
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: fst2 (-> (Tuple2) Bool))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: mainNew (-> (Tree) Tuple2))
  (let mainNew ((Leaf ?tv18)) (MakeTuple2 True ?tv18))
  (let mainNew ((Node ?tv19 ?tv20 ?tv21)) (MakeTuple2 (and (and (and (lq (snd2 (mainNew ?tv20)) ?tv19) (fst2 (mainNew ?tv21))) (fst2 (mainNew ?tv20))) (lq ?tv19 (snd2 (mainNew ?tv21)))) ?tv19))
  (=== synduce_tree_sorted (inp0) (Tree) (main inp0) (fst2 (mainNew inp0)))
)
