(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Leaf Node))
  (:: Leaf (-> (Nat) Tree))
  (:: Node (-> (Nat Tree Tree) Tree))
  (data TreeMemo (Mleaf Mnode))
  (:: Mleaf (-> (Nat) TreeMemo))
  (:: Mnode (-> (Nat Nat TreeMemo TreeMemo) TreeMemo))
  (:: memo (-> (TreeMemo) Nat))
  (let memo ((Mleaf ?tv1)) (Succ Zero))
  (let memo ((Mnode ?tv2 ?tv3 ?tv4 ?tv5)) ?tv2)
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: ismemo (-> (TreeMemo) Bool))
  (let ismemo ((Mleaf ?tv9)) True)
  (let ismemo ((Mnode ?tv10 ?tv11 ?tv12 ?tv13)) (and (nateq ?tv10 (plus (Succ Zero) (plus (memo ?tv12) (memo ?tv13)))) (and (ismemo ?tv12) (ismemo ?tv13))))
  (:: repr (-> (TreeMemo) Tree))
  (let repr ((Mleaf ?tv17)) (Leaf ?tv17))
  (let repr ((Mnode ?tv18 ?tv19 ?tv20 ?tv21)) (Node ?tv19 (repr ?tv20) (repr ?tv21)))
  (:: spec (-> (Tree) Nat))
  (let spec ((Leaf ?tv32)) (Succ Zero))
  (let spec ((Node ?tv33 ?tv34 ?tv35)) (plus (Succ Zero) (plus (spec ?tv34) (spec ?tv35))))
  (:: ite2 (-> (Bool Nat) Nat))
  (let ite2 (True ?x) ?x)
  (let ite2 (False ?x) Zero)
  (:: main (-> (TreeMemo) Nat))
  (let main (?tv36) (ite2 (ismemo ?tv36) (spec (repr ?tv36))))
  (:: mainNew (-> (TreeMemo) Nat))
  (let mainNew (?tv37) (ite2 (ismemo ?tv37) (memo ?tv37)))
  (=== synduce_constraints_memo_tree_size (inp0) (TreeMemo) (main inp0) (mainNew inp0))
)
