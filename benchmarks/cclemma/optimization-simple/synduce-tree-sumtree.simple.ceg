(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Nil Node))
  (:: Nil (-> (Unit) Tree))
  (:: Node (-> (Nat Tree Tree) Tree))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: spec (-> (Nat Tree) Nat))
  (let spec (?tv4 (Nil ?tv5)) ?tv4)
  (let spec (?tv4 (Node ?tv6 ?tv7 ?tv8)) (spec (plus (spec ?tv4 ?tv7) ?tv6) ?tv8))
  (:: main (-> (Tree) Nat))
  (let main (?tv16) (spec Zero ?tv16))
  (:: mainNew (-> (Tree) Nat))
  (let mainNew ((Nil ?tv20)) Zero)
  (let mainNew ((Node ?tv21 ?tv22 ?tv23)) (plus (mainNew ?tv23) (plus (mainNew ?tv22) ?tv21)))
  (=== optimize (inp0) (Tree) (main inp0) (mainNew inp0))
)
