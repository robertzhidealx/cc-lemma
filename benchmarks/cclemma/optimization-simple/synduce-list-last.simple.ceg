(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (data CList (Single Concat))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> (CList CList) CList))
  (:: spec (-> (List) Nat))
  (let spec ((Elt ?tv3)) ?tv3)
  (let spec ((Cons ?tv4 ?tv5)) (spec ?tv5))
  (:: cat (-> (List List) List))
  (let cat (?tv11 (Elt ?tv12)) (Cons ?tv12 ?tv11))
  (let cat (?tv11 (Cons ?tv13 ?tv14)) (Cons ?tv13 (cat ?tv11 ?tv14)))
  (:: repr (-> (CList) List))
  (let repr ((Single ?tv18)) (Elt ?tv18))
  (let repr ((Concat ?tv19 ?tv20)) (cat (repr ?tv20) (repr ?tv19)))
  (:: main (-> (CList) Nat))
  (let main (?tv21) (spec (repr ?tv21)))
  (:: mainNew (-> (CList) Nat))
  (let mainNew ((Single ?tv25)) ?tv25)
  (let mainNew ((Concat ?tv26 ?tv27)) (mainNew ?tv27))
  (=== synduce_list_last (inp0) (CList) (main inp0) (mainNew inp0))
)
