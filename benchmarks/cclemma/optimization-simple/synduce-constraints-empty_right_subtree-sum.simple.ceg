(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Nil Leaf Node))
  (:: Nil (-> (Unit) Tree))
  (:: Leaf (-> (Nat) Tree))
  (:: Node (-> (Nat Tree Tree) Tree))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: size (-> (Tree) Nat))
  (let size ((Nil ?tv3)) Zero)
  (let size ((Leaf ?tv4)) (Succ Zero))
  (let size ((Node ?tv5 ?tv6 ?tv7)) (plus (Succ Zero) (plus (size ?tv6) (size ?tv7))))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: emptyright (-> (Tree) Bool))
  (let emptyright ((Node ?tv11 ?tv12 ?tv13)) (and (nateq Zero (size ?tv13)) (emptyright ?tv12)))
  (let emptyright ((Nil ?tv14)) True)
  (let emptyright ((Leaf ?tv15)) True)
  (:: spec (-> (Tree) Nat))
  (let spec ((Nil ?tv19)) Zero)
  (let spec ((Leaf ?tv20)) ?tv20)
  (let spec ((Node ?tv21 ?tv22 ?tv23)) (plus ?tv21 (plus (spec ?tv22) (spec ?tv23))))
  (:: target (-> (Tree) Tree))
  (let target ((Nil ?tv27)) (Nil Null))
  (let target ((Leaf ?tv28)) (Leaf ?tv28))
  (let target ((Node ?tv29 ?tv30 ?tv31)) (Node ?tv29 (target ?tv30) ?tv31))
  (:: ite1 (-> (Bool Nat) Nat))
  (let ite1 (True ?x) ?x)
  (let ite1 (False ?x) Zero)
  (:: main (-> (Tree) Nat))
  (let main (?tv32) (ite1 (emptyright ?tv32) (spec (target ?tv32))))
  (:: targetNew (-> (Tree) Nat))
  (let targetNew ((Nil ?tv36)) Zero)
  (let targetNew ((Leaf ?tv37)) ?tv37)
  (let targetNew ((Node ?tv38 ?tv39 ?tv40)) (plus (targetNew ?tv39) ?tv38))
  (:: mainNew (-> (Tree) Nat))
  (let mainNew (?tv41) (ite1 (emptyright ?tv41) (targetNew ?tv41)))
  (=== optimize (inp0) (Tree) (main inp0) (mainNew inp0))
)
