(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (data Zipper (Zip))
  (:: Zip (-> (List List) Zipper))
  (:: concat (-> (List List) List))
  (let concat (?tv5 (Nil ?tv6)) ?tv5)
  (let concat (?tv5 (Cons ?tv7 ?tv8)) (Cons ?tv7 (concat ?tv5 ?tv8)))
  (:: rev (-> (List) List))
  (let rev ((Nil ?tv12)) (Nil Null))
  (let rev ((Cons ?tv13 ?tv14)) (concat (Cons ?tv13 (Nil Null)) (rev ?tv14)))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: sum (-> (List) Nat))
  (let sum ((Nil ?tv18)) Zero)
  (let sum ((Cons ?tv19 ?tv20)) (plus ?tv19 (sum ?tv20)))
  (:: repr (-> (Zipper) List))
  (let repr ((Zip ?tv22 ?tv23)) (concat (rev ?tv22) ?tv23))
  (:: main (-> (Zipper) Nat))
  (let main (?tv28) (sum (repr ?tv28)))
  (:: mainNew (-> (Zipper) Nat))
  (let mainNew ((Zip ?tv31 ?tv32)) (plus (sum ?tv31) (sum ?tv32)))
  (=== optimize (inp0) (Zipper) (main inp0) (mainNew inp0))
)
