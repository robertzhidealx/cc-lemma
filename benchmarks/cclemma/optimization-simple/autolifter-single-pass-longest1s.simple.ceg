(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data List (Cons Nil))
  (:: Cons (-> (Bool List) List))
  (:: Nil (-> (Unit) List))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv10 ?tv11) (ite1 (lq ?tv10 ?tv11) ?tv11 ?tv10))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: longest1s (-> (Nat List) Nat))
  (let longest1s (?tv16 (Nil ?tv17)) Zero)
  (let longest1s (?tv16 (Cons ?tv18 ?tv19)) (max (ite1 ?tv18 (plus ?tv16 (Succ Zero)) Zero) (longest1s (ite1 ?tv18 (plus ?tv16 (Succ Zero)) Zero) ?tv19)))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Nat Nat) Tuple2))
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: mainNew (-> (List) Tuple2))
  (let mainNew ((Nil ?tv25)) (MakeTuple2 Zero Zero))
  (let mainNew ((Cons ?tv26 ?tv27)) (MakeTuple2 (ite1 (or (not ?tv26) (lq (snd2 (mainNew ?tv27)) (fst2 (mainNew ?tv27)))) (fst2 (mainNew ?tv27)) (plus (Succ Zero) (fst2 (mainNew ?tv27)))) (ite1 (not ?tv26) Zero (plus (Succ Zero) (snd2 (mainNew ?tv27))))))
  (=== autolifter_single_pass_longest1s (inp0) (List) (longest1s Zero inp0) (fst2 (mainNew inp0)))
)
