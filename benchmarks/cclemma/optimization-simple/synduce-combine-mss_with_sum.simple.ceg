(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (data IdxList (Ielt Icons))
  (:: Ielt (-> (Nat) IdxList))
  (:: Icons (-> (Nat Nat IdxList) IdxList))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite2 (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: hsum (-> (List) Nat))
  (let hsum ((Elt ?tv5)) ?tv5)
  (let hsum ((Cons ?tv6 ?tv7)) (plus ?tv6 (hsum ?tv7)))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Nat Nat) Tuple3))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: ite3 (-> (Bool Tuple3) Tuple3))
  (let ite3 (True ?x) ?x)
  (let ite3 (False ?x) (MakeTuple3 Zero Zero Zero))
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x0)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x1)
  (:: third3 (-> (Tuple3) Nat))
  (let third3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x2)
  (:: spec (-> (List) Tuple3))
  (let spec ((Elt ?tv11)) (ite3 (gq ?tv11 Zero) (MakeTuple3 ?tv11 ?tv11 ?tv11)))
  (let spec ((Cons ?tv12 ?tv13)) (MakeTuple3 (max (plus ?tv12 (hsum ?tv13)) (fst3 (spec ?tv13))) (max (plus ?tv12 (snd3 (spec ?tv13))) Zero) (max (max (plus ?tv12 (snd3 (spec ?tv13))) Zero) (third3 (spec ?tv13)))))
  (:: repr (-> (IdxList) List))
  (let repr ((Ielt ?tv18)) (Elt ?tv18))
  (let repr ((Icons ?tv19 ?tv20 ?tv21)) (Cons ?tv19 (repr ?tv21)))
  (data Tuple4 (MakeTuple4))
  (:: MakeTuple4 (-> (Nat Nat) Tuple4))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: snd4 (-> (Tuple4) Nat))
  (let snd4 ((MakeTuple4 ?x0 ?x1)) ?x1)
  (:: fst4 (-> (Tuple4) Nat))
  (let fst4 ((MakeTuple4 ?x0 ?x1)) ?x0)
  (:: reprNew (-> (IdxList) Tuple4))
  (let reprNew ((Ielt ?tv26)) (MakeTuple4 (max ?tv26 Zero) ?tv26))
  (let reprNew ((Icons ?tv27 ?tv28 ?tv29)) (MakeTuple4 (ite2 (and (lq (plus ?tv27 (snd4 (reprNew ?tv29))) (fst4 (reprNew ?tv29))) (lq ?tv27 (fst4 (reprNew ?tv29)))) (fst4 (reprNew ?tv29)) (ite2 (lq (snd4 (reprNew ?tv29)) Zero) ?tv27 (plus ?tv27 (snd4 (reprNew ?tv29))))) (plus ?tv27 (max (snd4 (reprNew ?tv29)) Zero))))
  (=== synduce_combine_mss_with_sum (inp0) (IdxList) (third3 (spec (repr inp0))) (fst4 (reprNew inp0)))
)
