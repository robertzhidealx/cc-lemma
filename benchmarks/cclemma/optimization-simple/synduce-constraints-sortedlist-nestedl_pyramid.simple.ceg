(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (data NList (Line Ncons))
  (:: Line (-> (List) NList))
  (:: Ncons (-> (List NList) NList))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite2 (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (:: lmax (-> (List) Nat))
  (let lmax ((Elt ?tv5)) ?tv5)
  (let lmax ((Cons ?tv6 ?tv7)) (max ?tv6 (lmax ?tv7)))
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv8 ?tv9) (ite2 (lq ?tv8 ?tv9) ?tv8 ?tv9))
  (:: lmin (-> (List) Nat))
  (let lmin ((Elt ?tv13)) ?tv13)
  (let lmin ((Cons ?tv14 ?tv15)) (min ?tv14 (lmin ?tv15)))
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: tf5 (-> (Nat NList) Bool))
  (let tf5 (?tv20 (Line ?tv21)) (leq ?tv20 (lmax ?tv21)))
  (let tf5 (?tv20 (Ncons ?tv22 ?tv23)) (and (leq ?tv20 (lmax ?tv22)) (tf5 (lmax ?tv22) ?tv23)))
  (:: issorted (-> (NList) Bool))
  (let issorted ((Line ?tv25)) True)
  (let issorted ((Ncons ?tv26 ?tv27)) (tf5 (lmax ?tv26) ?tv27))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Nat) Tuple3))
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: interval (-> (List) Tuple3))
  (let interval ((Elt ?tv31)) (MakeTuple3 ?tv31 ?tv31))
  (let interval ((Cons ?tv32 ?tv33)) (MakeTuple3 (min (fst3 (interval ?tv33)) ?tv32) (max (snd3 (interval ?tv33)) ?tv32)))
  (data Tuple4 (MakeTuple4))
  (:: MakeTuple4 (-> (Nat Nat Bool) Tuple4))
  (:: fst4 (-> (Tuple4) Nat))
  (let fst4 ((MakeTuple4 ?x0 ?x1 ?x2)) ?x0)
  (:: snd4 (-> (Tuple4) Nat))
  (let snd4 ((MakeTuple4 ?x0 ?x1 ?x2)) ?x1)
  (:: third4 (-> (Tuple4) Bool))
  (let third4 ((MakeTuple4 ?x0 ?x1 ?x2)) ?x2)
  (:: geq (-> (Nat Nat) Bool))
  (let geq (Zero (Succ ?x)) False)
  (let geq (?x Zero) True)
  (let geq ((Succ ?x) (Succ ?y)) (geq ?x ?y))
  (:: spec (-> (NList) Tuple4))
  (let spec ((Line ?tv37)) (MakeTuple4 (fst3 (interval ?tv37)) (snd3 (interval ?tv37)) True))
  (let spec ((Ncons ?tv38 ?tv39)) (MakeTuple4 (min (fst3 (interval ?tv38)) (fst4 (spec ?tv39))) (max (snd3 (interval ?tv38)) (snd4 (spec ?tv39))) (and (third4 (spec ?tv39)) (and (leq (fst4 (spec ?tv39)) (fst3 (interval ?tv38))) (geq (snd4 (spec ?tv39)) (snd3 (interval ?tv38)))))))
  (:: ite5 (-> (Bool Bool) Bool))
  (let ite5 (True ?x) ?x)
  (let ite5 (False ?x) False)
  (:: main (-> (NList) Bool))
  (let main (?tv47) (ite5 (issorted ?tv47) (third4 (spec ?tv47))))
  (data Tuple6 (MakeTuple6))
  (:: MakeTuple6 (-> (Bool Nat) Tuple6))
  (:: fst6 (-> (Tuple6) Bool))
  (let fst6 ((MakeTuple6 ?x0 ?x1)) ?x0)
  (:: snd6 (-> (Tuple6) Nat))
  (let snd6 ((MakeTuple6 ?x0 ?x1)) ?x1)
  (:: targetNew (-> (NList) Tuple6))
  (let targetNew ((Line ?tv51)) (MakeTuple6 True (fst3 (interval ?tv51))))
  (let targetNew ((Ncons ?tv52 ?tv53)) (MakeTuple6 (and (fst6 (targetNew ?tv53)) (leq (snd6 (targetNew ?tv53)) (lmin ?tv52))) (snd6 (targetNew ?tv53))))
  (:: mainNew (-> (NList) Bool))
  (let mainNew (?tv54) (ite5 (issorted ?tv54) (fst6 (targetNew ?tv54))))
  (=== synduce-constraints-sortedlist-nestedl_pyramid (inp0) (NList) (main inp0) (mainNew inp0))
)
