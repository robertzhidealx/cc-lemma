(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Formula (Flit Fand Forr Fnot))
  (:: Flit (-> (Bool) Formula))
  (:: Fand (-> (Formula Formula) Formula))
  (:: Forr (-> (Formula Formula) Formula))
  (:: Fnot (-> (Formula) Formula))
  (data NnfFormula (Nfneglit Nflit Nfand Nfor))
  (:: Nfneglit (-> (Bool) NnfFormula))
  (:: Nflit (-> (Bool) NnfFormula))
  (:: Nfand (-> (NnfFormula NnfFormula) NnfFormula))
  (:: Nfor (-> (NnfFormula NnfFormula) NnfFormula))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: ite2 (-> (Bool) Bool))
  (let ite2 (True) False)
  (let ite2 (False) True)
  (:: spec (-> (Formula) Bool))
  (let spec ((Flit ?tv3)) ?tv3)
  (let spec ((Fand ?tv4 ?tv5)) (and (spec ?tv4) (spec ?tv5)))
  (let spec ((Forr ?tv6 ?tv7)) (or (spec ?tv6) (spec ?tv7)))
  (let spec ((Fnot ?tv8)) (ite2 (spec ?tv8)))
  (:: repr (-> (NnfFormula) Formula))
  (let repr ((Nflit ?tv12)) (Flit ?tv12))
  (let repr ((Nfneglit ?tv13)) (Fnot (Flit ?tv13)))
  (let repr ((Nfand ?tv14 ?tv15)) (Fand (repr ?tv14) (repr ?tv15)))
  (let repr ((Nfor ?tv16 ?tv17)) (Forr (repr ?tv16) (repr ?tv17)))
  (:: main (-> (NnfFormula) Bool))
  (let main (?tv18) (spec (repr ?tv18)))
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: mainNew (-> (NnfFormula) Bool))
  (let mainNew ((Nflit ?tv22)) ?tv22)
  (let mainNew ((Nfneglit ?tv23)) (not ?tv23))
  (let mainNew ((Nfand ?tv24 ?tv25)) (and (mainNew ?tv25) (mainNew ?tv24)))
  (let mainNew ((Nfor ?tv26 ?tv27)) (or (mainNew ?tv26) (mainNew ?tv27)))
  (=== synduce_misc_simple_nnf (inp0) (NnfFormula) (main inp0) (mainNew inp0))
)
