(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data List (Elt Cons))
  (:: Elt (-> (Bool) List))
  (:: Cons (-> (Bool List) List))
  (data CList (Single Concat))
  (:: Single (-> (Bool) CList))
  (:: Concat (-> (CList CList) CList))
  (:: catlist (-> (List List) List))
  (let catlist (?tv5 (Elt ?tv6)) (Cons ?tv6 ?tv5))
  (let catlist (?tv5 (Cons ?tv7 ?tv8)) (Cons ?tv7 (catlist ?tv5 ?tv8)))
  (:: repr (-> (CList) List))
  (let repr ((Single ?tv12)) (Elt ?tv12))
  (let repr ((Concat ?tv13 ?tv14)) (catlist (repr ?tv14) (repr ?tv13)))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Bool Bool Bool) Tuple2))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: fst2 (-> (Tuple2) Bool))
  (let fst2 ((MakeTuple2 ?x0 ?x1 ?x2)) ?x0)
  (:: snd2 (-> (Tuple2) Bool))
  (let snd2 ((MakeTuple2 ?x0 ?x1 ?x2)) ?x1)
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: third2 (-> (Tuple2) Bool))
  (let third2 ((MakeTuple2 ?x0 ?x1 ?x2)) ?x2)
  (:: spec (-> (List) Tuple2))
  (let spec ((Elt ?tv18)) (MakeTuple2 ?tv18 True ?tv18))
  (let spec ((Cons ?tv19 ?tv20)) (MakeTuple2 (and (fst2 (spec ?tv20)) ?tv19) (and (snd2 (spec ?tv20)) (or (fst2 (spec ?tv20)) (not ?tv19))) (third2 (spec ?tv20))))
  (:: main (-> (CList) Bool))
  (let main (?tv21) (snd2 (spec (repr ?tv21))))
  (:: mainNew (-> (CList) Tuple2))
  (let mainNew ((Single ?tv25)) (MakeTuple2 True ?tv25 ?tv25))
  (let mainNew ((Concat ?tv26 ?tv27)) (MakeTuple2 (or (and (and (not (third2 (mainNew ?tv26))) (fst2 (mainNew ?tv26))) (fst2 (mainNew ?tv27))) (and (and (fst2 (mainNew ?tv26)) (fst2 (mainNew ?tv27))) (snd2 (mainNew ?tv27)))) (snd2 (mainNew ?tv26)) (third2 (mainNew ?tv27))))
  (=== synduce-list-zeros_ones (inp0) (CList) (main inp0) (fst2 (mainNew inp0)))
)
