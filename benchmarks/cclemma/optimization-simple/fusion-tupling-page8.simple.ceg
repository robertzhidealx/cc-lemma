(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data MyNat (Myzero Mysucc))
  (:: Myzero (-> (Unit) MyNat))
  (:: Mysucc (-> (MyNat) MyNat))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: fib (-> (MyNat) Nat))
  (let fib ((Myzero ?tv3)) Zero)
  (let fib ((Mysucc (Myzero ?tv4))) (Succ Zero))
  (let fib ((Mysucc (Mysucc ?tv5))) (plus (fib ?tv5) (fib (Mysucc ?tv5))))
  (:: repr (-> (MyNat MyNat) MyNat))
  (let repr (?tv9 (Myzero ?tv10)) ?tv9)
  (let repr (?tv9 (Mysucc ?tv11)) (Mysucc (repr ?tv11 ?tv11)))
  (data Tuple0 (MakeTuple0))
  (:: MakeTuple0 (-> (Nat Nat) Tuple0))
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: fst0 (-> (Tuple0) Nat))
  (let fst0 ((MakeTuple0 ?x0 ?x1)) ?x0)
  (:: snd0 (-> (Tuple0) Nat))
  (let snd0 ((MakeTuple0 ?x0 ?x1)) ?x1)
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: reprNew (-> (MyNat) Tuple0))
  (let reprNew ((Myzero ?tv16)) (MakeTuple0 Zero Zero))
  (let reprNew ((Mysucc ?tv17)) (MakeTuple0 (ite1 (nateq (fst0 (reprNew ?tv17)) (snd0 (reprNew ?tv17))) (plus (Succ Zero) (fst0 (reprNew ?tv17))) (plus (fst0 (reprNew ?tv17)) (snd0 (reprNew ?tv17)))) (fst0 (reprNew ?tv17))))
  (=== optimize (inp0) (MyNat) (fib (repr inp0 inp0)) (fst0 (reprNew inp0)))
)
