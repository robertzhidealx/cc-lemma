(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data UList (Unil Uelt Usplit))
  (:: Unil (-> (Unit) UList))
  (:: Uelt (-> (Nat) UList))
  (:: Usplit (-> (UList Nat Nat UList) UList))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (:: repr (-> (List UList) List))
  (let repr (?tv4 (Unil ?tv5)) ?tv4)
  (let repr (?tv4 (Uelt ?tv6)) (Cons ?tv6 ?tv4))
  (let repr (?tv4 (Usplit ?tv7 ?tv8 ?tv9 ?tv10)) (repr (Cons ?tv8 (Cons ?tv9 (repr ?tv4 ?tv10))) ?tv7))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: tf3 (-> (Nat List) Bool))
  (let tf3 (?tv15 (Nil ?tv16)) (gq ?tv15 Zero))
  (let tf3 (?tv15 (Cons ?tv17 ?tv18)) (and (gq ?tv15 Zero) (and (gq ?tv15 ?tv17) (tf3 ?tv17 ?tv18))))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Bool Bool) Bool))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: tf5 (-> (Nat List) Bool))
  (let tf5 (?tv22 (Nil ?tv23)) (gq ?tv22 Zero))
  (let tf5 (?tv22 (Cons ?tv24 ?tv25)) (and (gq ?tv22 Zero) (ite2 (lq ?tv22 ?tv24) (tf5 ?tv24 ?tv25) (tf3 ?tv24 ?tv25))))
  (:: isunimodal (-> (List) Bool))
  (let isunimodal ((Nil ?tv27)) True)
  (let isunimodal ((Cons ?tv28 ?tv29)) (tf5 ?tv28 ?tv29))
  (:: ite3 (-> (Bool Nat Nat) Nat))
  (let ite3 (True ?x ?y) ?x)
  (let ite3 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv30 ?tv31) (ite3 (lq ?tv30 ?tv31) ?tv31 ?tv30))
  (:: spec (-> (List) Nat))
  (let spec ((Nil ?tv35)) Zero)
  (let spec ((Cons ?tv36 ?tv37)) (max ?tv36 (spec ?tv37)))
  (:: ite4 (-> (Bool UList UList) UList))
  (let ite4 (True ?x ?y) ?x)
  (let ite4 (False ?x ?y) ?y)
  (:: target (-> (UList) UList))
  (let target ((Unil ?tv41)) (Unil Null))
  (let target ((Uelt ?tv42)) (Uelt ?tv42))
  (let target ((Usplit ?tv43 ?tv44 ?tv45 ?tv46)) (ite4 (gq ?tv44 ?tv45) (Usplit (target ?tv43) ?tv44 ?tv45 ?tv46) (Usplit ?tv43 ?tv44 ?tv45 (target ?tv46))))
  (:: main (-> (UList) Nat))
  (let main (?tv47) (ite3 (isunimodal (repr (Nil Null) ?tv47)) (spec (repr (Nil Null) (target ?tv47))) Zero))
  (:: targetNew (-> (UList) Nat))
  (let targetNew ((Unil ?tv51)) Zero)
  (let targetNew ((Uelt ?tv52)) ?tv52)
  (let targetNew ((Usplit ?tv53 ?tv54 ?tv55 ?tv56)) (ite3 (gq ?tv54 ?tv55) (max ?tv54 (targetNew ?tv53)) (ite3 (lq (targetNew ?tv56) ?tv55) ?tv55 (targetNew ?tv56))))
  (:: mainNew (-> (UList) Nat))
  (let mainNew (?tv57) (ite3 (isunimodal (repr (Nil Null) ?tv57)) (targetNew ?tv57) Zero))
  (=== synduce-constraints-unimodal_lists-max_logn (inp0) (UList) (main inp0) (mainNew inp0))
)
