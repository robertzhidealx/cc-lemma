(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data List (Cons Nil))
  (:: Cons (-> (Bool List) List))
  (:: Nil (-> (Unit) List))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: ite1 (-> (Bool Bool) Bool))
  (let ite1 (True ?x) ?x)
  (let ite1 (False ?x) False)
  (:: main (-> (Bool List) Bool))
  (let main (?tv14 (Nil ?tv15)) True)
  (let main (?tv14 (Cons ?tv16 ?tv17)) (ite1 (or (not ?tv16) (and ?tv14 ?tv16)) (main (and ?tv14 ?tv16) ?tv17)))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Bool Nat) Tuple2))
  (:: fst2 (-> (Tuple2) Bool))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: ite3 (-> (Bool Nat Nat) Nat))
  (let ite3 (True ?x ?y) ?x)
  (let ite3 (False ?x ?y) ?y)
  (:: mainNew (-> (List) Tuple2))
  (let mainNew ((Nil ?tv23)) (MakeTuple2 True Zero))
  (let mainNew ((Cons ?tv24 ?tv25)) (MakeTuple2 (or (and ?tv24 (fst2 (mainNew ?tv25))) (nateq (snd2 (mainNew ?tv25)) Zero)) (ite3 (not ?tv24) (snd2 (mainNew ?tv25)) (plus (Succ Zero) (snd2 (mainNew ?tv25))))))
  (=== optimize (inp0) (List) (main True inp0) (fst2 (mainNew inp0)))
)
