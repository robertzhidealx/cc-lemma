(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite1 (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: sum (-> (List) Nat))
  (let sum ((Nil ?tv5)) Zero)
  (let sum ((Cons ?tv6 ?tv7)) (plus ?tv6 (sum ?tv7)))
  (:: spec (-> (List) Nat))
  (let spec ((Nil ?tv11)) Zero)
  (let spec ((Cons ?tv12 ?tv13)) (max (plus ?tv12 (sum ?tv13)) (spec ?tv13)))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Nat Nat) Tuple2))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: reprNew (-> (List) Tuple2))
  (let reprNew ((Nil ?tv25)) (MakeTuple2 Zero Zero))
  (let reprNew ((Cons ?tv26 ?tv27)) (MakeTuple2 (max (fst2 (reprNew ?tv27)) (plus ?tv26 (snd2 (reprNew ?tv27)))) (plus ?tv26 (snd2 (reprNew ?tv27)))))
  (=== synduce_combine_mts (inp0) (List) (spec inp0) (fst2 (reprNew inp0)))
)
