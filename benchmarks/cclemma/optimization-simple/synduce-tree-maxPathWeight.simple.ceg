(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Nil Node))
  (:: Nil (-> (Unit) Tree))
  (:: Node (-> (Nat Tree Tree) Tree))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite1 (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: spec (-> (Nat Tree) Nat))
  (let spec (?tv6 (Nil ?tv7)) ?tv6)
  (let spec (?tv6 (Node ?tv8 ?tv9 ?tv10)) (max (spec (plus ?tv6 ?tv8) ?tv9) (spec (plus ?tv6 ?tv8) ?tv10)))
  (:: main (-> (Tree) Nat))
  (let main (?tv18) (spec Zero ?tv18))
  (:: mainNew (-> (Tree) Nat))
  (let mainNew ((Nil ?tv22)) Zero)
  (let mainNew ((Node ?tv23 ?tv24 ?tv25)) (plus ?tv23 (max (mainNew ?tv25) (mainNew ?tv24))))
  (=== optimize (inp0) (Tree) (main inp0) (mainNew inp0))
)
