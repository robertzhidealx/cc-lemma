(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Tip Bin))
  (:: Tip (-> (Nat) Tree))
  (:: Bin (-> (Tree Tree) Tree))
  (data Tuple1 (MakeTuple1))
  (:: MakeTuple1 (-> (Nat Nat) Tuple1))
  (data PTree (Ptip Pbin))
  (:: Ptip (-> (Nat Nat) PTree))
  (:: Pbin (-> (PTree PTree) PTree))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf3 (-> (PTree) PTree))
  (let tf3 ((Ptip ?tv8 ?tv9)) (Ptip (plus ?tv8 (Succ Zero)) ?tv9))
  (let tf3 ((Pbin ?tv10 ?tv11)) (Pbin (tf3 ?tv10) (tf3 ?tv11)))
  (:: tri (-> (Tree) PTree))
  (let tri ((Tip ?tv3)) (Ptip Zero ?tv3))
  (let tri ((Bin ?tv4 ?tv5)) (Pbin (tf3 (tri ?tv4)) (tf3 (tri ?tv5))))
  (:: times (-> (Nat Nat) Nat))
  (let times (Zero ?x) Zero)
  (let times ((Succ ?x) ?y) (plus (times ?x ?y) ?y))
  (:: tsum (-> (PTree) Nat))
  (let tsum ((Ptip ?tv15 ?tv16)) (times ?tv15 ?tv16))
  (let tsum ((Pbin ?tv17 ?tv18)) (plus (tsum ?tv17) (tsum ?tv18)))
  (:: main (-> (Tree) Nat))
  (let main (?tv19) (tsum (tri ?tv19)))
  (:: fst1 (-> (Tuple1) Nat))
  (let fst1 ((MakeTuple1 ?x0 ?x1)) ?x0)
  (:: snd1 (-> (Tuple1) Nat))
  (let snd1 ((MakeTuple1 ?x0 ?x1)) ?x1)
  (:: mainNew (-> (Tree) Tuple1))
  (let mainNew ((Tip ?tv23)) (MakeTuple1 Zero ?tv23))
  (let mainNew ((Bin ?tv24 ?tv25)) (MakeTuple1 (plus (plus (plus (fst1 (mainNew ?tv24)) (snd1 (mainNew ?tv24))) (fst1 (mainNew ?tv25))) (snd1 (mainNew ?tv25))) (plus (snd1 (mainNew ?tv24)) (snd1 (mainNew ?tv25)))))
  (=== optimize (inp0) (Tree) (main inp0) (fst1 (mainNew inp0)))
)
