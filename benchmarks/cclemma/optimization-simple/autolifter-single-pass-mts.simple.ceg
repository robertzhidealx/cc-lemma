(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Unit (Null))
  (:: Null Unit)
  (data List (Cons Nil))
  (:: Cons (-> (Nat List) List))
  (:: Nil (-> (Unit) List))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv10 ?tv11) (ite1 (lq ?tv10 ?tv11) ?tv11 ?tv10))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Nat Nat) Tuple2))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: mts (-> (List) Tuple2))
  (let mts ((Nil ?tv15)) (MakeTuple2 Zero Zero))
  (let mts ((Cons ?tv16 ?tv17)) (MakeTuple2 (max (plus (snd2 (mts ?tv17)) ?tv16) (fst2 (mts ?tv17))) (plus (snd2 (mts ?tv17)) ?tv16)))
  (:: mainNew (-> (List) Tuple2))
  (let mainNew ((Nil ?tv23)) (MakeTuple2 Zero Zero))
  (let mainNew ((Cons ?tv24 ?tv25)) (MakeTuple2 (ite1 (lq (plus ?tv24 (snd2 (mainNew ?tv25))) (fst2 (mainNew ?tv25))) (fst2 (mainNew ?tv25)) (plus ?tv24 (snd2 (mainNew ?tv25)))) (plus ?tv24 (snd2 (mainNew ?tv25)))))
  (=== autolifter_single_pass_mts (inp0) (List) (fst2 (mts inp0)) (fst2 (mainNew inp0)))
)
