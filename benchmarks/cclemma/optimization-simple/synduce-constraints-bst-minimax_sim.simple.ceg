(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Leaf Node))
  (:: Leaf (-> (Nat) Tree))
  (:: Node (-> (Nat Tree Tree) Tree))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv0 ?tv1) (ite1 (lq ?tv0 ?tv1) ?tv0 ?tv1))
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv2 ?tv3) (ite1 (lq ?tv2 ?tv3) ?tv3 ?tv2))
  (:: tmin (-> (Tree) Nat))
  (let tmin ((Leaf ?tv7)) ?tv7)
  (let tmin ((Node ?tv8 ?tv9 ?tv10)) (min ?tv8 (min (tmin ?tv9) (tmin ?tv10))))
  (:: tmax (-> (Tree) Nat))
  (let tmax ((Leaf ?tv14)) ?tv14)
  (let tmax ((Node ?tv15 ?tv16 ?tv17)) (max ?tv15 (max (tmax ?tv16) (tmax ?tv17))))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: geq (-> (Nat Nat) Bool))
  (let geq (Zero (Succ ?x)) False)
  (let geq (?x Zero) True)
  (let geq ((Succ ?x) (Succ ?y)) (geq ?x ?y))
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: isbst (-> (Tree) Bool))
  (let isbst ((Leaf ?tv21)) True)
  (let isbst ((Node ?tv22 ?tv23 ?tv24)) (and (and (geq ?tv22 (tmax ?tv23)) (leq ?tv22 (tmin ?tv24))) (and (isbst ?tv23) (isbst ?tv24))))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Nat Nat) Tuple2))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: spec (-> (Tree) Tuple2))
  (let spec ((Leaf ?tv28)) (MakeTuple2 ?tv28 ?tv28))
  (let spec ((Node ?tv29 ?tv30 ?tv31)) (MakeTuple2 (max ?tv29 (max (fst2 (spec ?tv30)) (fst2 (spec ?tv31)))) (min ?tv29 (min (snd2 (spec ?tv30)) (snd2 (spec ?tv31))))))
  (:: ite2 (-> (Bool Tuple2) Tuple2))
  (let ite2 (True ?x) ?x)
  (let ite2 (False ?x) (MakeTuple2 Zero Zero))
  (:: main (-> (Tree) Tuple2))
  (let main (?tv38) (ite2 (isbst ?tv38) (spec ?tv38)))
  (:: targetNew (-> (Tree) Tuple2))
  (let targetNew ((Leaf ?tv41)) (MakeTuple2 ?tv41 ?tv41))
  (let targetNew ((Node ?tv42 ?tv43 ?tv44)) (MakeTuple2 (tmax ?tv44) (tmin ?tv43)))
  (:: mainNew (-> (Tree) Tuple2))
  (let mainNew (?tv45) (ite2 (isbst ?tv45) (MakeTuple2 (fst2 (targetNew ?tv45)) (snd2 (targetNew ?tv45)))))
  (=== synduce_constraints_bst_minimax_sim (inp0) (Tree) (main inp0) (mainNew inp0))
)
