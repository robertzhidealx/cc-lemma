(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (data PList (Pnil Pcons))
  (:: Pnil (-> (Unit) PList))
  (:: Pcons (-> (Nat Nat PList) PList))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf3 (-> (PList) PList))
  (let tf3 ((Pnil ?tv8)) (Pnil Null))
  (let tf3 ((Pcons ?tv9 ?tv10 ?tv11)) (Pcons (plus ?tv9 (Succ Zero)) ?tv10 (tf3 ?tv11)))
  (:: tri (-> (List) PList))
  (let tri ((Nil ?tv3)) (Pnil Null))
  (let tri ((Cons ?tv4 ?tv5)) (Pcons Zero ?tv4 (tf3 (tri ?tv5))))
  (:: times (-> (Nat Nat) Nat))
  (let times (Zero ?x) Zero)
  (let times ((Succ ?x) ?y) (plus (times ?x ?y) ?y))
  (:: tsum (-> (PList) Nat))
  (let tsum ((Pnil ?tv15)) Zero)
  (let tsum ((Pcons ?tv16 ?tv17 ?tv18)) (plus (times ?tv16 ?tv17) (tsum ?tv18)))
  (:: main (-> (List) Nat))
  (let main (?tv19) (tsum (tri ?tv19)))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Nat Nat) Tuple2))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: mainNew (-> (List) Tuple2))
  (let mainNew ((Nil ?tv23)) (MakeTuple2 Zero Zero))
  (let mainNew ((Cons ?tv24 ?tv25)) (MakeTuple2 (fst2 (MakeTuple2 (plus (fst2 (mainNew ?tv25)) (snd2 (mainNew ?tv25))) (snd2 (mainNew ?tv25)))) (plus (snd2 (MakeTuple2 (plus (fst2 (mainNew ?tv25)) (snd2 (mainNew ?tv25))) (snd2 (mainNew ?tv25)))) ?tv24)))
  (=== fusion-algprog-ex3 (inp0) (List) (main inp0) (fst2 (mainNew inp0)))
)
