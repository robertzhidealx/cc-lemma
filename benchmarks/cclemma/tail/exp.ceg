(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)

  (data Nat (Z S))
  (:: Z Nat)
  (:: S (-> (Nat) Nat))

  (:: plus (-> (Nat Nat) Nat))
  (let plus (Z ?y) ?y)
  (let plus ((S ?x) ?y) (S (plus ?x ?y)))

  (:: times (-> (Nat Nat) Nat))
  (let times (Z ?x) Z)
  (let times ((S ?x) ?y) (plus (times ?x ?y) ?y))

  (:: exp (-> (Nat Nat) Nat))
  (let exp (?x Z) (S Z))
  (let exp (?x (S ?n)) (times ?x (exp ?x ?n)))

  (:: exptail (-> (Nat Nat Nat) Nat))
  (let exptail (?x Z ?acc) ?acc)
  (let exptail (?x (S ?n) ?acc) (exptail ?x ?n (times ?x ?acc)))

  (=== tail_1 (x n) (Nat Nat)
    (exp x n)
    (exptail x n (S Z))
  )
)