(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (data CnList (Sglt Cat))
  (:: Sglt (-> (Nat) CnList))
  (:: Cat (-> (CnList Nat CnList) CnList))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite2 (gq ?tv0 ?tv1) ?tv0 ?tv1))
  (:: catlist (-> (List List) List))
  (let catlist (?tv7 (Elt ?tv8)) (Cons ?tv8 ?tv7))
  (let catlist (?tv7 (Cons ?tv9 ?tv10)) (Cons ?tv9 (catlist ?tv7 ?tv10)))
  (:: repr (-> (CnList) List))
  (let repr ((Sglt ?tv14)) (Elt ?tv14))
  (let repr ((Cat ?tv15 ?tv16 ?tv17)) (catlist (repr ?tv17) (repr ?tv15)))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Bool) Tuple3))
  (:: geq (-> (Nat Nat) Bool))
  (let geq (Zero (Succ ?x)) False)
  (let geq (?x Zero) True)
  (let geq ((Succ ?x) (Succ ?y)) (geq ?x ?y))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: snd3 (-> (Tuple3) Bool))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: spec (-> (List) Tuple3))
  (let spec ((Elt ?tv21)) (MakeTuple3 (max Zero ?tv21) (geq ?tv21 Zero)))
  (let spec ((Cons ?tv22 ?tv23)) (MakeTuple3 (ite2 (and (snd3 (spec ?tv23)) (geq ?tv22 Zero)) (plus ?tv22 (fst3 (spec ?tv23))) (fst3 (spec ?tv23))) (and (snd3 (spec ?tv23)) (geq ?tv22 Zero))))
  (:: main (-> (CnList) Nat))
  (let main (?tv24) (fst3 (spec (repr ?tv24))))
  (data Tuple4 (MakeTuple4))
  (:: MakeTuple4 (-> (Nat Nat Nat Nat) Tuple4))
  (:: times (-> (Nat Nat) Nat))
  (let times (Zero ?x) Zero)
  (let times ((Succ ?x) ?y) (plus (times ?x ?y) ?y))
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: fourth4 (-> (Tuple4) Nat))
  (let fourth4 ((MakeTuple4 ?x0 ?x1 ?x2 ?x3)) ?x3)
  (:: fst4 (-> (Tuple4) Nat))
  (let fst4 ((MakeTuple4 ?x0 ?x1 ?x2 ?x3)) ?x0)
  (:: third4 (-> (Tuple4) Nat))
  (let third4 ((MakeTuple4 ?x0 ?x1 ?x2 ?x3)) ?x2)
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: snd4 (-> (Tuple4) Nat))
  (let snd4 ((MakeTuple4 ?x0 ?x1 ?x2 ?x3)) ?x1)
  (:: mainNew (-> (CnList) Tuple4))
  (let mainNew ((Sglt ?tv28)) (MakeTuple4 (max ?tv28 Zero) (times (Succ (Succ Zero)) (max ?tv28 Zero)) ?tv28 ?tv28))
  (let mainNew ((Cat ?tv29 ?tv30 ?tv31)) (MakeTuple4 (ite2 (or (and (nateq (fourth4 (mainNew ?tv31)) Zero) (nateq (fst4 (mainNew ?tv31)) (third4 (mainNew ?tv31)))) (lq (fst4 (mainNew ?tv31)) (snd4 (mainNew ?tv31)))) (plus (fst4 (mainNew ?tv31)) (fst4 (mainNew ?tv29))) (fst4 (mainNew ?tv31))) (ite2 (or (or (and (lq (fst4 (mainNew ?tv31)) (snd4 (mainNew ?tv31))) (lq (fst4 (mainNew ?tv29)) (snd4 (mainNew ?tv29)))) (and (nateq (fourth4 (mainNew ?tv31)) Zero) (nateq (fst4 (mainNew ?tv31)) (third4 (mainNew ?tv31))))) (and (nateq (fourth4 (mainNew ?tv29)) Zero) (nateq (fst4 (mainNew ?tv29)) (third4 (mainNew ?tv29))))) (plus (snd4 (mainNew ?tv31)) (snd4 (mainNew ?tv29))) (ite2 (or (and (lq Zero (fourth4 (mainNew ?tv31))) (nateq (fst4 (mainNew ?tv31)) (snd4 (mainNew ?tv31)))) (lq (third4 (mainNew ?tv31)) (fst4 (mainNew ?tv31)))) (fst4 (mainNew ?tv31)) (plus (fst4 (mainNew ?tv31)) (fst4 (mainNew ?tv29))))) (plus (third4 (mainNew ?tv31)) (third4 (mainNew ?tv29))) (max (fourth4 (mainNew ?tv31)) (fourth4 (mainNew ?tv29)))))
  (=== synduce-list-slsp (inp0) (CnList) (main inp0) (fst4 (mainNew inp0)))
)
