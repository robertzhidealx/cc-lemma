(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (:: geq (-> (Nat Nat) Bool))
  (let geq (Zero (Succ ?x)) False)
  (let geq (?x Zero) True)
  (let geq ((Succ ?x) (Succ ?y)) (geq ?x ?y))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: tf1 (-> (Nat List) Bool))
  (let tf1 (?tv4 (Elt ?tv5)) (geq ?tv4 ?tv5))
  (let tf1 (?tv4 (Cons ?tv6 ?tv7)) (and (geq ?tv4 ?tv6) (tf1 ?tv6 ?tv7)))
  (:: issorted (-> (List) Bool))
  (let issorted ((Elt ?tv9)) True)
  (let issorted ((Cons ?tv10 ?tv11)) (tf1 ?tv10 ?tv11))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv12 ?tv13) (ite1 (lq ?tv12 ?tv13) ?tv13 ?tv12))
  (:: maximum (-> (List) Nat))
  (let maximum ((Elt ?tv17)) ?tv17)
  (let maximum ((Cons ?tv18 ?tv19)) (max ?tv18 (maximum ?tv19)))
  (:: target (-> (List List) List))
  (let target (?tv22 (Elt ?tv23)) ?tv22)
  (let target (?tv22 (Cons ?tv24 ?tv25)) ?tv22)
  (:: main (-> (List) Nat))
  (let main (?tv26) (ite1 (issorted ?tv26) (maximum (target ?tv26 ?tv26)) Zero))
  (:: targetNew (-> (List) Nat))
  (let targetNew ((Elt ?tv29)) ?tv29)
  (let targetNew ((Cons ?tv30 ?tv31)) ?tv30)
  (:: mainNew (-> (List) Nat))
  (let mainNew (?tv32) (ite1 (issorted ?tv32) (targetNew ?tv32) Zero))
  (=== optimize (inp0) (List) (main inp0) (mainNew inp0))
)
