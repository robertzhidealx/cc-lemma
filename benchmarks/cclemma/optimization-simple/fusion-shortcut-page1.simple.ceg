(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (data BoolList (Bnil Bcons))
  (:: Bnil (-> (Unit) BoolList))
  (:: Bcons (-> (Bool BoolList) BoolList))
  (:: map (-> (List) BoolList))
  (let map ((Nil ?tv6)) (Bnil Null))
  (let map ((Cons ?tv7 ?tv8)) (Bcons (geq Zero ?tv7) (map ?tv8)))
  (:: geq (-> (Nat Nat) Bool))
  (let geq (Zero (Succ ?x)) False)
  (let geq (?x Zero) True)
  (let geq ((Succ ?x) (Succ ?y)) (geq ?x ?y))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: all (-> (BoolList) Bool))
  (let all ((Bnil ?tv13)) True)
  (let all ((Bcons ?tv14 ?tv15)) (and ?tv14 (all ?tv15)))
  (:: main (-> (List) Bool))
  (let main (?tv16) (all (map ?tv16)))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: mainNew (-> (List) Bool))
  (let mainNew ((Nil ?tv21)) True)
  (let mainNew ((Cons ?tv22 ?tv23)) (and (mainNew ?tv23) (lq ?tv22 (Succ Zero))))
  (=== optimize (inp0) (List) (main inp0) (mainNew inp0))
)
