(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (data CList (Single Concat))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> (CList CList) CList))
  (:: cat (-> (List List) List))
  (let cat (?tv5 (Elt ?tv6)) (Cons ?tv6 ?tv5))
  (let cat (?tv5 (Cons ?tv7 ?tv8)) (Cons ?tv7 (cat ?tv5 ?tv8)))
  (:: repr (-> (CList) List))
  (let repr ((Single ?tv12)) (Elt ?tv12))
  (let repr ((Concat ?tv13 ?tv14)) (cat (repr ?tv14) (repr ?tv13)))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv15 ?tv16) (ite2 (lq ?tv15 ?tv16) ?tv16 ?tv15))
  (:: lmax (-> (CList) Nat))
  (let lmax ((Single ?tv20)) ?tv20)
  (let lmax ((Concat ?tv21 ?tv22)) (max (lmax ?tv21) (lmax ?tv22)))
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv23 ?tv24) (ite2 (lq ?tv23 ?tv24) ?tv23 ?tv24))
  (:: lmin (-> (CList) Nat))
  (let lmin ((Single ?tv28)) ?tv28)
  (let lmin ((Concat ?tv29 ?tv30)) (min (lmin ?tv29) (lmin ?tv30)))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: ispart (-> (CList) Bool))
  (let ispart ((Single ?tv34)) True)
  (let ispart ((Concat ?tv35 ?tv36)) (and (gq (lmin ?tv35) (lmax ?tv36)) (and (ispart ?tv35) (ispart ?tv36))))
  (:: spec (-> (List) Nat))
  (let spec ((Elt ?tv40)) ?tv40)
  (let spec ((Cons ?tv41 ?tv42)) (max ?tv41 (spec ?tv42)))
  (:: main (-> (CList) Nat))
  (let main (?tv50) (ite2 (ispart ?tv50) (spec (repr ?tv50)) Zero))
  (:: targetNew (-> (CList) Nat))
  (let targetNew ((Single ?tv54)) ?tv54)
  (let targetNew ((Concat ?tv55 ?tv56)) (targetNew ?tv55))
  (:: mainNew (-> (CList) Nat))
  (let mainNew (?tv57) (ite2 (ispart ?tv57) (targetNew ?tv57) Zero))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
