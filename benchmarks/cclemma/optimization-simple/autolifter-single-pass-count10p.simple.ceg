(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data List (Cons Nil))
  (:: Cons (-> (Bool List) List))
  (:: Nil (-> (Unit) List))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: count10p (-> (Bool Bool List) Nat))
  (let count10p (?tv15 ?tv16 (Nil ?tv17)) Zero)
  (let count10p (?tv15 ?tv16 (Cons ?tv18 ?tv19)) (plus (ite1 (and ?tv16 ?tv18) (Succ Zero) Zero) (count10p ?tv18 (and (not ?tv18) (or ?tv15 ?tv16)) ?tv19)))
  (:: alhead (-> (List) Bool))
  (let alhead ((Nil ?tv22)) False)
  (let alhead ((Cons ?tv23 ?tv24)) ?tv23)
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Nat Nat) Tuple2))
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: mainNew (-> (List) Tuple2))
  (let mainNew ((Nil ?tv29)) (MakeTuple2 Zero Zero))
  (let mainNew ((Cons ?tv30 ?tv31)) (MakeTuple2 (ite1 (or (or (not ?tv30) (nateq (fst2 (mainNew ?tv31)) (snd2 (mainNew ?tv31)))) (alhead ?tv31)) (fst2 (mainNew ?tv31)) (plus (Succ Zero) (fst2 (mainNew ?tv31)))) (ite1 (not ?tv30) (snd2 (mainNew ?tv31)) (plus (Succ Zero) (snd2 (mainNew ?tv31))))))
  (=== autolifter-single-pass-count10p (inp0) (List) (count10p False False inp0) (fst2 (mainNew inp0)))
)
