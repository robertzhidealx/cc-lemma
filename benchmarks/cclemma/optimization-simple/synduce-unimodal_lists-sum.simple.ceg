(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data UList (Unil Uelt Usplit))
  (:: Unil (-> (Unit) UList))
  (:: Uelt (-> (Nat) UList))
  (:: Usplit (-> (UList Nat Nat UList) UList))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (:: repr (-> (List UList) List))
  (let repr (?tv4 (Unil ?tv5)) ?tv4)
  (let repr (?tv4 (Uelt ?tv6)) (Cons ?tv6 ?tv4))
  (let repr (?tv4 (Usplit ?tv7 ?tv8 ?tv9 ?tv10)) (repr (Cons ?tv8 (Cons ?tv9 (repr ?tv4 ?tv10))) ?tv7))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: geq (-> (Nat Nat) Bool))
  (let geq (Zero (Succ ?x)) False)
  (let geq (?x Zero) True)
  (let geq ((Succ ?x) (Succ ?y)) (geq ?x ?y))
  (:: tf3 (-> (Nat List) Bool))
  (let tf3 (?tv15 (Nil ?tv16)) True)
  (let tf3 (?tv15 (Cons ?tv17 ?tv18)) (and (geq ?tv15 ?tv17) (tf3 ?tv17 ?tv18)))
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: ite2 (-> (Bool Bool Bool) Bool))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: tf5 (-> (Nat List) Bool))
  (let tf5 (?tv22 (Nil ?tv23)) True)
  (let tf5 (?tv22 (Cons ?tv24 ?tv25)) (ite2 (leq ?tv22 ?tv24) (tf5 ?tv24 ?tv25) (tf3 ?tv24 ?tv25)))
  (:: isunimodal (-> (List) Bool))
  (let isunimodal ((Nil ?tv27)) True)
  (let isunimodal ((Cons ?tv28 ?tv29)) (tf5 ?tv28 ?tv29))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: spec (-> (List) Nat))
  (let spec ((Nil ?tv33)) Zero)
  (let spec ((Cons ?tv34 ?tv35)) (plus ?tv34 (spec ?tv35)))
  (:: ite3 (-> (Bool Nat) Nat))
  (let ite3 (True ?x) ?x)
  (let ite3 (False ?x) Zero)
  (:: main (-> (UList) Nat))
  (let main (?tv45) (ite3 (isunimodal (repr (Nil Null) ?tv45)) (spec (repr (Nil Null) ?tv45))))
  (:: targetNew (-> (UList) Nat))
  (let targetNew ((Unil ?tv49)) Zero)
  (let targetNew ((Uelt ?tv50)) ?tv50)
  (let targetNew ((Usplit ?tv51 ?tv52 ?tv53 ?tv54)) (plus (targetNew ?tv54) (plus (targetNew ?tv51) (plus ?tv52 ?tv53))))
  (:: mainNew (-> (UList) Nat))
  (let mainNew (?tv55) (ite3 (isunimodal (repr (Nil Null) ?tv55)) (targetNew ?tv55)))
  (=== synduce_unimodal_lists_sum (inp0) (UList) (main inp0) (mainNew inp0))
)
